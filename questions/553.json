{"id":553,"difficulty":"hard","title":"deep-object-to-unique","code":"/*\n  553 - Deep object to unique\n  -------\n  by null (@uid11) #上級 #deep\n\n  ### 質問\n\n  TypeScript は構造的型システムを持っていますが、場合によっては(公称型システムのように)あらかじめ定義されたユニークなオブジェクトだけを受け入れ、required なフィールドを持つオブジェクトは受け入れないようにしたいこともあるでしょう。\n\n  引数にオブジェクトを受け取り、引数に含まれる全てのオブジェクトの文字列と数値のキー、およびこれらのキーの値のプロパティーを保持しながら、引数のオブジェクトとそれに含まれるネストしたオブジェクト全てをユニークにする型を実装します。\n\n  元の型と実装した型のアウトプットの型は相互に代入可能でなければなりませんが、同一の型であってはいけません。\n\n  例えば、\n\n  ```ts\n  import { Equal } from '@type-challenges/utils';\n\n  type Foo = { foo: 2; bar: { 0: 1 }; baz: { 0: 1 } };\n\n  type UniqFoo = DeepObjectToUniq<Foo>;\n\n  declare let foo: Foo;\n  declare let uniqFoo: UniqFoo;\n\n  uniqFoo = foo; // ok\n  foo = uniqFoo; // ok\n\n  type T0 = Equal<UniqFoo, Foo>; // false\n  type T1 = UniqFoo['foo']; // 2\n  type T2 = Equal<UniqFoo['bar'], UniqFoo['baz']>; // false\n  type T3 = UniqFoo['bar'][0]; // 1\n  type T4 = Equal<keyof Foo & string, keyof UniqFoo & string>; // true\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/553/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DeepObjectToUniq<O extends object> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, IsFalse, IsTrue } from '@type-challenges/utils'\n\ntype Quz = { quz: 4 }\n\ntype Foo = { foo: 2, baz: Quz, bar: Quz }\ntype Bar = { foo: 2, baz: Quz, bar: Quz & { quzz?: 0 } }\n\ntype UniqQuz = DeepObjectToUniq<Quz>\ntype UniqFoo = DeepObjectToUniq<Foo>\ntype UniqBar = DeepObjectToUniq<Bar>\n\ndeclare let foo: Foo\ndeclare let uniqFoo: UniqFoo\n\nuniqFoo = foo\nfoo = uniqFoo\n\ntype cases = [\n  IsFalse<Equal<UniqQuz, Quz>>,\n  IsFalse<Equal<UniqFoo, Foo>>,\n  IsTrue<Equal<UniqFoo['foo'], Foo['foo']>>,\n  IsTrue<Equal<UniqFoo['bar']['quz'], Foo['bar']['quz']>>,\n  IsFalse<Equal<UniqQuz, UniqFoo['baz']>>,\n  IsFalse<Equal<UniqFoo['bar'], UniqFoo['baz']>>,\n  IsFalse<Equal<UniqBar['baz'], UniqFoo['baz']>>,\n  IsTrue<Equal<keyof UniqBar['baz'], keyof UniqFoo['baz']>>,\n  IsTrue<Equal<keyof Foo, keyof UniqFoo & string>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/553/answer/ja\n  > 解答を見る：https://tsch.js.org/553/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}