{"id":7,"title":"readonly","difficulty":"easy","code":"/*\n  7 - Readonly\n  -------\n  by Anthony Fu (@antfu) #初級 #built-in #readonly #object-keys\n\n  ### 質問\n\n  組み込みの型ユーティリティ`Readonly<T>`を使用せず、`T` のすべてのプロパティを読み取り専用にする型を実装します。実装された型のプロパティは再割り当てできません。\n\n  例えば：\n\n  ```ts\n  interface Todo {\n    title: string\n    description: string\n  }\n\n  const todo: MyReadonly<Todo> = {\n    title: \"Hey\",\n    description: \"foobar\"\n  }\n\n  todo.title = \"Hello\" // Error: cannot reassign a readonly property\n  todo.description = \"barFoo\" // Error: cannot reassign a readonly property\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/7/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyReadonly<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<MyReadonly<Todo1>, Readonly<Todo1>>>,\n]\n\ninterface Todo1 {\n  title: string\n  description: string\n  completed: boolean\n  meta: {\n    author: string\n  }\n}\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/7/answer/ja\n  > 解答を見る：https://tsch.js.org/7/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}