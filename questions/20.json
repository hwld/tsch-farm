{"id":20,"title":"promise-all","difficulty":"medium","code":"/*\n  20 - Promise.all\n  -------\n  by Anthony Fu (@antfu) #中級 #array #promise\n\n  ### 質問\n\n  Promise ライクなオブジェクトの配列を受け取る関数 `PromiseAll` に型を付けてください。戻り値は `Promise<T>` である必要があります。ここで、`T` は解決された結果の配列です。\n\n  ```ts\n  const promise1 = Promise.resolve(3);\n  const promise2 = 42;\n  const promise3 = new Promise<string>((resolve, reject) => {\n    setTimeout(resolve, 100, 'foo');\n  });\n\n  // expected to be `Promise<[number, 42, string]>`\n  const p = PromiseAll([promise1, promise2, promise3] as const)\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/20/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ndeclare function PromiseAll(values: any): any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst promiseAllTest1 = PromiseAll([1, 2, 3] as const)\nconst promiseAllTest2 = PromiseAll([1, 2, Promise.resolve(3)] as const)\nconst promiseAllTest3 = PromiseAll([1, 2, Promise.resolve(3)])\nconst promiseAllTest4 = PromiseAll<Array<number | Promise<number>>>([1, 2, 3])\n\ntype cases = [\n  Expect<Equal<typeof promiseAllTest1, Promise<[1, 2, 3]>>>,\n  Expect<Equal<typeof promiseAllTest2, Promise<[1, 2, number]>>>,\n  Expect<Equal<typeof promiseAllTest3, Promise<[number, number, number]>>>,\n  Expect<Equal<typeof promiseAllTest4, Promise<number[]>>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/20/answer/ja\n  > 解答を見る：https://tsch.js.org/20/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}