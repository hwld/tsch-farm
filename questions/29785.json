{"id":29785,"title":"deep-omit","difficulty":"medium","code":"/*\n  29785 - Deep Omit\n  -------\n  by bowen (@jiaowoxiaobala) #中級 #omit object-keys deep\n\n  ### 質問\n\n  Implement a type`DeepOmit`, Like Utility types [Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys), A type takes two arguments.\n\n  For example:\n\n  ```ts\n  type obj = {\n    person: {\n      name: string;\n      age: {\n        value: number\n      }\n    }\n  }\n\n  type test1 = DeepOmit<obj, 'person'>    // {}\n  type test2 = DeepOmit<obj, 'person.name'> // { person: { age: { value: number } } }\n  type test3 = DeepOmit<obj, 'name'> // { person: { name: string; age: { value: number } } }\n  type test4 = DeepOmit<obj, 'person.age.value'> // { person: { name: string; age: {} } }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/29785/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DeepOmit = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype obj = {\r\n  person: {\r\n    name: string\r\n    age: {\r\n      value: number\r\n    }\r\n  }\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<DeepOmit<obj, 'person'>, {}>>,\r\n  Expect<Equal<DeepOmit<obj, 'person.name'>, { person: { age: { value: number } } }>>,\r\n  Expect<Equal<DeepOmit<obj, 'name'>, obj>>,\r\n  Expect<Equal<DeepOmit<obj, 'person.age.value'>, { person: { name: string, age: {} } }>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/29785/answer/ja\n  > 解答を見る：https://tsch.js.org/29785/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}