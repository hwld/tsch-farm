{"id":472,"title":"tuple-to-enum-object","difficulty":"hard","code":"/*\n  472 - Tuple to Enum Object\n  -------\n  by Ryo Hanafusa (@softoika) #上級 #tuple #template-literal\n\n  ### 質問\n\n  enum は TypeScript 独自の文法です(JavaScript にはありません)。そのため、以下の形式にトランスパイルされます。\n\n  ```js\n  let OperatingSystem\n  ;(function (OperatingSystem) {\n    OperatingSystem[(OperatingSystem['MacOS'] = 0)] = 'MacOS'\n    OperatingSystem[(OperatingSystem['Windows'] = 1)] = 'Windows'\n    OperatingSystem[(OperatingSystem['Linux'] = 2)] = 'Linux'\n  })(OperatingSystem || (OperatingSystem = {}))\n  ```\n\n  この問題では、文字列のタプルを enum と同じようなオブジェクトに変換する型を実装します。\n  さらに、enum のプロパティはパスカルケースであることが好ましいです。\n\n  ```ts\n  Enum<['macOS', 'Windows', 'Linux']>\n  // -> { readonly MacOS: \"macOS\", readonly Windows: \"Windows\", readonly Linux: \"Linux\" }\n  ```\n\n  第 2 引数に`true`が与えられた場合、値は数値リテラルとなります。\n\n  ```ts\n  Enum<['macOS', 'Windows', 'Linux'], true>\n  // -> { readonly MacOS: 0, readonly Windows: 1, readonly Linux: 2 }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/472/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Enum<T extends readonly string[], N extends boolean = false> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst OperatingSystem = ['macOS', 'Windows', 'Linux'] as const\nconst Command = ['echo', 'grep', 'sed', 'awk', 'cut', 'uniq', 'head', 'tail', 'xargs', 'shift'] as const\n\ntype cases = [\n  Expect<Equal<Enum<[]>, {}>>,\n  Expect<Equal<\n  Enum<typeof OperatingSystem>,\n  {\n    readonly MacOS: 'macOS'\n    readonly Windows: 'Windows'\n    readonly Linux: 'Linux'\n  }\n  >>,\n  Expect<Equal<\n  Enum<typeof OperatingSystem, true>,\n  {\n    readonly MacOS: 0\n    readonly Windows: 1\n    readonly Linux: 2\n  }\n  >>,\n  Expect<Equal<\n  Enum<typeof Command>,\n  {\n    readonly Echo: 'echo'\n    readonly Grep: 'grep'\n    readonly Sed: 'sed'\n    readonly Awk: 'awk'\n    readonly Cut: 'cut'\n    readonly Uniq: 'uniq'\n    readonly Head: 'head'\n    readonly Tail: 'tail'\n    readonly Xargs: 'xargs'\n    readonly Shift: 'shift'\n  }\n  >>,\n  Expect<Equal<\n  Enum<typeof Command, true>,\n  {\n    readonly Echo: 0\n    readonly Grep: 1\n    readonly Sed: 2\n    readonly Awk: 3\n    readonly Cut: 4\n    readonly Uniq: 5\n    readonly Head: 6\n    readonly Tail: 7\n    readonly Xargs: 8\n    readonly Shift: 9\n  }\n  >>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/472/answer/ja\n  > 解答を見る：https://tsch.js.org/472/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}