{"id":108,"difficulty":"medium","title":"trim","code":"/*\n  108 - Trim\n  -------\n  by Anthony Fu (@antfu) #中級 #template-literal\n\n  ### 質問\n\n  文字列を受け取り、両端の空白を削除した新しい文字列を返す `Trim<T>` を実装します。\n\n  例えば\n\n  ```ts\n  type trimed = Trim<'  Hello World  '> // expected to be 'Hello World'\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/108/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Trim<S extends string> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Trim<'str'>, 'str'>>,\n  Expect<Equal<Trim<' str'>, 'str'>>,\n  Expect<Equal<Trim<'     str'>, 'str'>>,\n  Expect<Equal<Trim<'str   '>, 'str'>>,\n  Expect<Equal<Trim<'     str     '>, 'str'>>,\n  Expect<Equal<Trim<'   \\n\\t foo bar \\t'>, 'foo bar'>>,\n  Expect<Equal<Trim<''>, ''>>,\n  Expect<Equal<Trim<' \\n\\t '>, ''>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/108/answer/ja\n  > 解答を見る：https://tsch.js.org/108/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}