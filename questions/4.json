{"id":4,"difficulty":"easy","title":"pick","code":"/*\n  4 - Pick\n  -------\n  by Anthony Fu (@antfu) #初級 #union #built-in\n\n  ### 質問\n\n  組み込みの型ユーティリティ`Pick<T, K>`を使用せず、`T`から`K`のプロパティを抽出する型を実装します。\n\n  例えば：\n\n  ```ts\n  interface Todo {\n    title: string\n    description: string\n    completed: boolean\n  }\n\n  type TodoPreview = MyPick<Todo, 'title' | 'completed'>\n\n  const todo: TodoPreview = {\n      title: 'Clean room',\n      completed: false,\n  }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/4/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyPick<T, K> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Expected1, MyPick<Todo, 'title'>>>,\n  Expect<Equal<Expected2, MyPick<Todo, 'title' | 'completed'>>>,\n  // @ts-expect-error\n  MyPick<Todo, 'title' | 'completed' | 'invalid'>,\n]\n\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ninterface Expected1 {\n  title: string\n}\n\ninterface Expected2 {\n  title: string\n  completed: boolean\n}\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/4/answer/ja\n  > 解答を見る：https://tsch.js.org/4/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}