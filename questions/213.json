{"id":213,"difficulty":"hard","title":"vue-basic-props","code":"/*\n  213 - Vue Basic Props\n  -------\n  by Anthony Fu (@antfu) #上級 #vue #application\n\n  ### 質問\n\n  **この問題は [6 - Simple Vue](//tsch.js.org/6) の続きです。 先にその問題を解いた上で、そこで得られるコードを基盤にしてこの問題に取り組んでください。**\n\n  Simple Vue に加え、我々は 新しく `props` フィールドをオプションとして利用できます。これは Vue の `props` オプションを更に簡潔にしたものです。利用するにはいくつかのルールがあります。\n\n  `props` は、 `this` に挿入された各々のフィールドをキーをとして保持するオブジェクトです。挿入された props は `data`,`computed`, `methods` などを始めとした 全ての環境からアクセス可能になります。\n\n  prop は コンストラクタ、または コンストラクタを含んだ `type` フィールドを持つオブジェクトで定義されます。\n\n  例)\n\n  ```js\n  props: {\n    foo: Boolean\n  }\n  // or\n  props: {\n    foo: { type: Boolean }\n  }\n  ```\n\n  これらは `type Props = { foo: boolean }` であると推測されます。\n\n  複数の型を渡した場合、Props の型は ユニオン型として推測されます。\n\n  ```ts\n  props: {\n    foo: { type: [Boolean, Number, String] }\n  }\n  // -->\n  type Props = { foo: boolean | number | string }\n  ```\n\n  空のオブジェクトが渡された場合、対象のkeyは `any` 型として推測されます。\n\n\n  より具体的なケースについては, Test Cases セクションを参照してください。\n\n  >Vue の `required`, `default`, そして 配列の props はこの問題において考慮されておりません.\n\n  > GitHubで確認する：https://tsch.js.org/213/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ndeclare function VueBasicProps(options: any): any\n\n/* _____________ テストケース _____________ */\nimport type { Debug, Equal, Expect, IsAny } from '@type-challenges/utils'\n\nclass ClassA {}\n\nVueBasicProps({\n  props: {\n    propA: {},\n    propB: { type: String },\n    propC: { type: Boolean },\n    propD: { type: ClassA },\n    propE: { type: [String, Number] },\n    propF: RegExp,\n  },\n  data(this) {\n    type PropsType = Debug<typeof this>\n    type cases = [\n      Expect<IsAny<PropsType['propA']>>,\n      Expect<Equal<PropsType['propB'], string>>,\n      Expect<Equal<PropsType['propC'], boolean>>,\n      Expect<Equal<PropsType['propD'], ClassA>>,\n      Expect<Equal<PropsType['propE'], string | number>>,\n      Expect<Equal<PropsType['propF'], RegExp>>,\n    ]\n\n    // @ts-expect-error\n    this.firstname\n    // @ts-expect-error\n    this.getRandom()\n    // @ts-expect-error\n    this.data()\n\n    return {\n      firstname: 'Type',\n      lastname: 'Challenges',\n      amount: 10,\n    }\n  },\n  computed: {\n    fullname() {\n      return `${this.firstname} ${this.lastname}`\n    },\n  },\n  methods: {\n    getRandom() {\n      return Math.random()\n    },\n    hi() {\n      alert(this.fullname.toLowerCase())\n      alert(this.getRandom())\n    },\n    test() {\n      const fullname = this.fullname\n      const propE = this.propE\n      type cases = [\n        Expect<Equal<typeof fullname, string>>,\n        Expect<Equal<typeof propE, string | number>>,\n      ]\n    },\n  },\n})\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/213/answer/ja\n  > 解答を見る：https://tsch.js.org/213/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}