{"id":599,"difficulty":"medium","title":"merge","code":"/*\n  599 - Merge\n  -------\n  by ZYSzys (@ZYSzys) #中級 #object\n\n  ### 質問\n\n  2 つの型をマージして新しい型を作ります。2 つ目に指定した型のキーは 1 つ目の型のキーを上書きします。\n\n  例えば\n\n  ```ts\n  type foo = {\n    name: string;\n    age: string;\n  }\n  type coo = {\n    age: number;\n    sex: string\n  }\n\n  type Result = Merge<foo,coo>; // expected to be {name: string, age: number, sex: string}\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/599/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Merge<F, S> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype Foo = {\n  a: number\n  b: string\n}\ntype Bar = {\n  b: number\n  c: boolean\n}\n\ntype cases = [\n  Expect<Equal<Merge<Foo, Bar>, {\n    a: number\n    b: number\n    c: boolean\n  }>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/599/answer/ja\n  > 解答を見る：https://tsch.js.org/599/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}