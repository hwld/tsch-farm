{"id":3376,"difficulty":"medium","title":"inordertraversal","code":"/*\n  3376 - InorderTraversal\n  -------\n  by jiangshan (@jiangshanmeta) #中級 #object\n\n  ### 質問\n\n  Implement the type version of binary tree inorder traversal.\n\n  For example:\n\n  ```typescript\n  const tree1 = {\n    val: 1,\n    left: null,\n    right: {\n      val: 2,\n      left: {\n        val: 3,\n        left: null,\n        right: null,\n      },\n      right: null,\n    },\n  } as const\n\n  type A = InorderTraversal<typeof tree1> // [1, 3, 2]\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/3376/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ninterface TreeNode {\n  val: number\n  left: TreeNode | null\n  right: TreeNode | null\n}\ntype InorderTraversal<T extends TreeNode | null> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst tree1 = {\n  val: 1,\n  left: null,\n  right: {\n    val: 2,\n    left: {\n      val: 3,\n      left: null,\n      right: null,\n    },\n    right: null,\n  },\n} as const\n\nconst tree2 = {\n  val: 1,\n  left: null,\n  right: null,\n} as const\n\nconst tree3 = {\n  val: 1,\n  left: {\n    val: 2,\n    left: null,\n    right: null,\n  },\n  right: null,\n} as const\n\nconst tree4 = {\n  val: 1,\n  left: null,\n  right: {\n    val: 2,\n    left: null,\n    right: null,\n  },\n} as const\n\ntype cases = [\n  Expect<Equal<InorderTraversal<null>, []>>,\n  Expect<Equal<InorderTraversal<typeof tree1>, [1, 3, 2]>>,\n  Expect<Equal<InorderTraversal<typeof tree2>, [1]>>,\n  Expect<Equal<InorderTraversal<typeof tree3>, [2, 1]>>,\n  Expect<Equal<InorderTraversal<typeof tree4>, [1, 2]>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/3376/answer/ja\n  > 解答を見る：https://tsch.js.org/3376/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}