{"id":8,"title":"readonly-2","difficulty":"medium","code":"/*\n  8 - Readonly 2\n  -------\n  by Anthony Fu (@antfu) #中級 #readonly #object-keys\n\n  ### 質問\n\n  2つの型引数`T`と`K`を取る`MyReadonly2<T, K>`を実装します。\n\n  `K`が指定されている場合は、`T`の中の`K`のプロパティのみを読み取り専用にします。`K`が指定されていない場合は、通常の`Readonly<T>`と同様に、すべてのプロパティを読み取り専用にします。\n\n  例えば\n\n  ```ts\n  interface Todo {\n    title: string\n    description: string\n    completed: boolean\n  }\n\n  const todo: MyReadonly2<Todo, 'title' | 'description'> = {\n    title: \"Hey\",\n    description: \"foobar\",\n    completed: false,\n  }\n\n  todo.title = \"Hello\" // Error: cannot reassign a readonly property\n  todo.description = \"barFoo\" // Error: cannot reassign a readonly property\n  todo.completed = true // OK\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/8/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyReadonly2<T, K> = any\n\n/* _____________ テストケース _____________ */\nimport type { Alike, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Alike<MyReadonly2<Todo1>, Readonly<Todo1>>>,\n  Expect<Alike<MyReadonly2<Todo1, 'title' | 'description'>, Expected>>,\n  Expect<Alike<MyReadonly2<Todo2, 'title' | 'description'>, Expected>>,\n  Expect<Alike<MyReadonly2<Todo2, 'description' >, Expected>>,\n]\n\n// @ts-expect-error\ntype error = MyReadonly2<Todo1, 'title' | 'invalid'>\n\ninterface Todo1 {\n  title: string\n  description?: string\n  completed: boolean\n}\n\ninterface Todo2 {\n  readonly title: string\n  description?: string\n  completed: boolean\n}\n\ninterface Expected {\n  readonly title: string\n  readonly description?: string\n  completed: boolean\n}\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/8/answer/ja\n  > 解答を見る：https://tsch.js.org/8/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}