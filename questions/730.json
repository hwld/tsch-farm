{"id":730,"difficulty":"hard","title":"union-to-tuple","code":"/*\n  730 - Union to Tuple\n  -------\n  by Sg (@suica) #上級 #union #tuple #infer\n\n  ### 質問\n\n  Implement a type, `UnionToTuple`, that converts a union to a tuple.\n\n  As we know, union is an unordered structure, but tuple is an ordered, which implies that we are not supposed to preassume any order will be preserved between terms of one union, when unions are created or transformed.\n\n  Hence in this challenge, **any permutation of the elements in the output tuple is acceptable**.\n\n  Your type should resolve to one of the following two types, but ***NOT*** a union of them!\n  ```ts\n  UnionToTuple<1>           // [1], and correct\n  UnionToTuple<'any' | 'a'> // ['any','a'], and correct\n  ```\n  or\n  ```ts\n  UnionToTuple<'any' | 'a'> // ['a','any'], and correct\n  ```\n  It shouldn't be a union of all acceptable tuples...\n  ```ts\n  UnionToTuple<'any' | 'a'> // ['a','any'] | ['any','a'], which is incorrect\n  ```\n\n\n  And a union could collapes, which means some types could absorb (or be absorbed by) others and there is no way to prevent this absorption. See the following examples:\n  ```ts\n  Equal<UnionToTuple<any | 'a'>,       UnionToTuple<any>>         // will always be a true\n  Equal<UnionToTuple<unknown | 'a'>,   UnionToTuple<unknown>>     // will always be a true\n  Equal<UnionToTuple<never | 'a'>,     UnionToTuple<'a'>>         // will always be a true\n  Equal<UnionToTuple<'a' | 'a' | 'a'>, UnionToTuple<'a'>>         // will always be a true\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/730/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype UnionToTuple<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype ExtractValuesOfTuple<T extends any[]> = T[keyof T & number]\n\ntype cases = [\n  Expect<Equal<UnionToTuple<'a' | 'b'>['length'], 2>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b'>>, 'a' | 'b'>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a'>>, 'a'>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any>>, any>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<undefined | void | 1>>, void | 1>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any | 1>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<any | 1>>, any>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'d' | 'f' | 1 | never>>, 'f' | 'd' | 1>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<[{ a: 1 }] | 1>>, [{ a: 1 }] | 1>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<never>>, never>>,\n  Expect<Equal<ExtractValuesOfTuple<UnionToTuple<'a' | 'b' | 'c' | 1 | 2 | 'd' | 'e' | 'f' | 'g'>>, 'f' | 'e' | 1 | 2 | 'g' | 'c' | 'd' | 'a' | 'b'>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/730/answer/ja\n  > 解答を見る：https://tsch.js.org/730/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}