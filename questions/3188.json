{"id":3188,"title":"tuple-to-nested-object","difficulty":"medium","code":"/*\n  3188 - Tuple to Nested Object\n  -------\n  by jiangshan (@jiangshanmeta) #中級 #object #tuple\n\n  ### 質問\n\n  Given a tuple type ```T``` that only contains string type, and a type ```U```, build an object recursively.\n\n  ```typescript\n  type a = TupleToNestedObject<['a'], string> // {a: string}\n  type b = TupleToNestedObject<['a', 'b'], number> // {a: {b: number}}\n  type c = TupleToNestedObject<[], boolean> // boolean. if the tuple is empty, just return the U type\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/3188/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype TupleToNestedObject<T, U> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<TupleToNestedObject<['a'], string>, { a: string }>>,\n  Expect<Equal<TupleToNestedObject<['a', 'b'], number>, { a: { b: number } }>>,\n  Expect<Equal<TupleToNestedObject<['a', 'b', 'c'], boolean>, { a: { b: { c: boolean } } }>>,\n  Expect<Equal<TupleToNestedObject<[], boolean>, boolean>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/3188/answer/ja\n  > 解答を見る：https://tsch.js.org/3188/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}