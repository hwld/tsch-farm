{"id":2,"title":"return-type","difficulty":"medium","code":"/*\n  2 - Get Return Type\n  -------\n  by Anthony Fu (@antfu) #中級 #infer #built-in\n\n  ### 質問\n\n  組み込みの型ユーティリティ`ReturnType<T>`を使用せず、`T`の戻り値の型を取得する型を実装します。\n\n  例えば\n\n  ```ts\n  const fn = (v: boolean) => {\n    if (v)\n      return 1\n    else\n      return 2\n  }\n\n  type a = MyReturnType<typeof fn> // should be \"1 | 2\"\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/2/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyReturnType<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<string, MyReturnType<() => string>>>,\n  Expect<Equal<123, MyReturnType<() => 123>>>,\n  Expect<Equal<ComplexObject, MyReturnType<() => ComplexObject>>>,\n  Expect<Equal<Promise<boolean>, MyReturnType<() => Promise<boolean>>>>,\n  Expect<Equal<() => 'foo', MyReturnType<() => () => 'foo'>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn>>>,\n  Expect<Equal<1 | 2, MyReturnType<typeof fn1>>>,\n]\n\ntype ComplexObject = {\n  a: [12, 'foo']\n  bar: 'hello'\n  prev(): number\n}\n\nconst fn = (v: boolean) => v ? 1 : 2\nconst fn1 = (v: boolean, w: any) => v ? 1 : 2\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/2/answer/ja\n  > 解答を見る：https://tsch.js.org/2/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}