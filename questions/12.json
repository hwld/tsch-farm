{"id":12,"title":"chainable-options","difficulty":"medium","code":"/*\n  12 - Chainable Options\n  -------\n  by Anthony Fu (@antfu) #中級 #application\n\n  ### 質問\n\n  JavaScript では、チェイン可能なオプションがよく使われます。しかし、TypeScript に切り替えたとき、正しく型を付けることができますか？\n\n  この課題では、オブジェクトでもクラスでも何でもいいので、 `option(key, value)` と `get()` の 2 つの関数を提供する型を定義してください。`option` では、与えられたキーと値を使って現在の config の型を拡張できます。最終的な結果は `get` で取得することにしましょう。\n\n  例えば\n\n  ```ts\n  declare const config: Chainable\n\n  const result = config\n    .option('foo', 123)\n    .option('name', 'type-challenges')\n    .option('bar', { value: 'Hello World' })\n    .get()\n\n  // expect the type of result to be:\n  interface Result {\n    foo: number\n    name: string\n    bar: {\n      value: string\n    }\n  }\n  ```\n\n  この問題を解くために js/ts のロジックを書く必要はありません。型レベルのロジックだけを書いてください。\n\n  `key` は `string` のみを受け付け、`value` は任意の型を受け付けると仮定しても構いません。同じ `key` が 2 回渡されることはありません。\n\n  > GitHubで確認する：https://tsch.js.org/12/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Chainable = {\n  option(key: string, value: any): any\n  get(): any\n}\n\n/* _____________ テストケース _____________ */\nimport type { Alike, Expect } from '@type-challenges/utils'\n\ndeclare const a: Chainable\n\nconst result1 = a\n  .option('foo', 123)\n  .option('bar', { value: 'Hello World' })\n  .option('name', 'type-challenges')\n  .get()\n\nconst result2 = a\n  .option('name', 'another name')\n  // @ts-expect-error\n  .option('name', 'last name')\n  .get()\n\nconst result3 = a\n  .option('name', 'another name')\n  // @ts-expect-error\n  .option('name', 123)\n  .get()\n\ntype cases = [\n  Expect<Alike<typeof result1, Expected1>>,\n  Expect<Alike<typeof result2, Expected2>>,\n  Expect<Alike<typeof result3, Expected3>>,\n]\n\ntype Expected1 = {\n  foo: number\n  bar: {\n    value: string\n  }\n  name: string\n}\n\ntype Expected2 = {\n  name: string\n}\n\ntype Expected3 = {\n  name: number\n}\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/12/answer/ja\n  > 解答を見る：https://tsch.js.org/12/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}