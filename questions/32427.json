{"id":32427,"title":"unbox","difficulty":"hard","code":"/*\n  32427 - Unbox\n  -------\n  by Julian Coy (@eXamadeus) #上級 #utils #promise #function #tuple #array\n\n  ### 質問\n\n  How can we build a type that \"unboxes\" arrays, functions, promises, and tuples?\n\n  Example:\n\n  ```typescript\n  Unbox<string> // string\n  Unbox<()=>number> // number\n  Unbox<boolean[]> // boolean\n  Unbox<Promise<boolean>> // boolean\n  ```\n\n  Bonus: Can we make it recursive?\n\n  ```typescript\n  Unbox<() => () => () => () => number> // number\n  ```\n\n  Double Bonus: Can we control the recursion?\n\n  ```typescript\n  Unbox<() => () => () => () => number, 3> // () => number\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/32427/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Unbox<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\ntype cases = [\r\n  // Base cases\r\n  Expect<Equal<Unbox<number>, number>>,\r\n  Expect<Equal<Unbox<() => number>, number>>,\r\n  Expect<Equal<Unbox<() => number | string>, number | string>>,\r\n  Expect<Equal<Unbox<number[]>, number>>,\r\n  Expect<Equal<Unbox<(number | string)[]>, number | string>>,\r\n  Expect<Equal<Unbox<[number]>, number>>,\r\n  Expect<Equal<Unbox<Promise<number>>, number>>,\r\n\r\n  // Bonus: Recursion\r\n  Expect<Equal<Unbox<() => Promise<() => Array<Promise<boolean>>>>, boolean>>,\r\n\r\n  // Bonus: Recusion levels\r\n  Expect<Equal<Unbox<() => () => () => () => number, 0>, number>>,\r\n  Expect<Equal<Unbox<() => () => () => () => number, 1>, () => () => () => number>>,\r\n  Expect<Equal<Unbox<() => () => () => () => number, 2>, () => () => number>>,\r\n  Expect<Equal<Unbox<() => () => () => () => number, 3>, () => number>>,\r\n  Expect<Equal<Unbox<() => () => () => () => number, 4>, number>>,\r\n  Expect<Equal<Unbox<() => () => () => () => number, 5>, number>>,\r\n  Expect<Equal<Unbox<number[][][][], 0>, number>>,\r\n  Expect<Equal<Unbox<number[][][][], 1>, number[][][]>>,\r\n  Expect<Equal<Unbox<number[][][][], 2>, number[][]>>,\r\n  Expect<Equal<Unbox<number[][][][], 3>, number[]>>,\r\n  Expect<Equal<Unbox<number[][][][], 4>, number>>,\r\n  Expect<Equal<Unbox<number[][][][], 5>, number>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 0>, number>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 1>, [[[number]]]>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 2>, [[number]]>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 3>, [number]>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 4>, number>>,\r\n  Expect<Equal<Unbox<[[[[number]]]], 5>, number>>,\r\n  Expect<Equal<Unbox<Promise<Promise<Promise<number>>>, 0>, number>>,\r\n  Expect<Equal<Unbox<Promise<Promise<Promise<number>>>, 1>, Promise<Promise<number>>>>,\r\n  Expect<Equal<Unbox<Promise<Promise<Promise<number>>>, 2>, Promise<number>>>,\r\n  Expect<Equal<Unbox<Promise<Promise<Promise<number>>>, 3>, number>>,\r\n  Expect<Equal<Unbox<Promise<Promise<Promise<number>>>, 4>, number>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/32427/answer/ja\n  > 解答を見る：https://tsch.js.org/32427/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}