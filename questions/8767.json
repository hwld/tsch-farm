{"id":8767,"title":"combination","difficulty":"medium","code":"/*\n  8767 - Combination\n  -------\n  by Homyee King (@HomyeeKing) #中級 #array #application #string\n\n  ### 質問\n\n  Given an array of strings, do Permutation & Combination.\n  It's also useful for the prop types like video [controlsList](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList)\n\n  ```ts\n  // expected to be `\"foo\" | \"bar\" | \"baz\" | \"foo bar\" | \"foo bar baz\" | \"foo baz\" | \"foo baz bar\" | \"bar foo\" | \"bar foo baz\" | \"bar baz\" | \"bar baz foo\" | \"baz foo\" | \"baz foo bar\" | \"baz bar\" | \"baz bar foo\"`\n  type Keys = Combination<['foo', 'bar', 'baz']>\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/8767/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Combination<T extends string[]> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Combination<['foo', 'bar', 'baz']>, 'foo' | 'bar' | 'baz' | 'foo bar' | 'foo bar baz' | 'foo baz' | 'foo baz bar' | 'bar foo' | 'bar foo baz' | 'bar baz' | 'bar baz foo' | 'baz foo' | 'baz foo bar' | 'baz bar' | 'baz bar foo'>>,\n  Expect<Equal<Combination<['apple', 'banana', 'cherry']>, 'apple' | 'banana' | 'cherry' |\n  'apple banana' | 'apple cherry' | 'banana apple' | 'banana cherry' | 'cherry apple' | 'cherry banana' |\n  'apple banana cherry' | 'apple cherry banana' | 'banana apple cherry' | 'banana cherry apple' | 'cherry apple banana' | 'cherry banana apple'>>,\n  Expect<Equal<Combination<['red', 'green', 'blue', 'yellow']>, 'red' | 'green' | 'blue' | 'yellow' |\n  'red green' | 'red blue' | 'red yellow' | 'green red' | 'green blue' | 'green yellow' | 'blue red' | 'blue green' | 'blue yellow' | 'yellow red' | 'yellow green' | 'yellow blue' |\n  'red green blue' | 'red green yellow' | 'red blue green' | 'red blue yellow' | 'red yellow green' | 'red yellow blue' |\n  'green red blue' | 'green red yellow' | 'green blue red' | 'green blue yellow' | 'green yellow red' | 'green yellow blue' |\n  'blue red green' | 'blue red yellow' | 'blue green red' | 'blue green yellow' | 'blue yellow red' | 'blue yellow green' |\n  'yellow red green' | 'yellow red blue' | 'yellow green red' | 'yellow green blue' | 'yellow blue red' | 'yellow blue green' |\n  'red green blue yellow' | 'red green yellow blue' | 'red blue green yellow' | 'red blue yellow green' | 'red yellow green blue' | 'red yellow blue green' |\n  'green red blue yellow' | 'green red yellow blue' | 'green blue red yellow' | 'green blue yellow red' | 'green yellow red blue' | 'green yellow blue red' |\n  'blue red green yellow' | 'blue red yellow green' | 'blue green red yellow' | 'blue green yellow red' | 'blue yellow red green' | 'blue yellow green red' |\n  'yellow red green blue' | 'yellow red blue green' | 'yellow green red blue' | 'yellow green blue red' | 'yellow blue red green' | 'yellow blue green red'>>\n  ,\n  Expect<Equal<Combination<['one', 'two']>, 'one' | 'two' |\n  'one two' | 'two one'>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/8767/answer/ja\n  > 解答を見る：https://tsch.js.org/8767/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}