{"id":956,"title":"deeppick","difficulty":"hard","code":"/*\n  956 - DeepPick\n  -------\n  by hiroya iizuka (@hiroyaiizuka) #上級 #deep\n\n  ### 質問\n\n  Implement a type DeepPick, that extends Utility types `Pick`.\n  A type takes two arguments.\n\n\n  For example:\n\n  ```ts\n  type obj = {\n    name: 'hoge',\n    age: 20,\n    friend: {\n      name: 'fuga',\n      age: 30,\n      family: {\n        name: 'baz',\n        age: 1\n      }\n    }\n  }\n\n  type T1 = DeepPick<obj, 'name'>   // { name : 'hoge' }\n  type T2 = DeepPick<obj, 'name' | 'friend.name'>  // { name : 'hoge' } & { friend: { name: 'fuga' }}\n  type T3 = DeepPick<obj, 'name' | 'friend.name' |  'friend.family.name'>  // { name : 'hoge' } &  { friend: { name: 'fuga' }} & { friend: { family: { name: 'baz' }}}\n\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/956/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DeepPick = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype Obj = {\n  a: number\n  b: string\n  c: boolean\n  obj: {\n    d: number\n    e: string\n    f: boolean\n    obj2: {\n      g: number\n      h: string\n      i: boolean\n    }\n  }\n  obj3: {\n    j: number\n    k: string\n    l: boolean\n  }\n}\n\ntype cases = [\n  Expect<Equal<DeepPick<Obj, ''>, unknown>>,\n  Expect<Equal<DeepPick<Obj, 'a'>, { a: number }>>,\n  Expect<Equal<DeepPick<Obj, 'a' | ''>, { a: number } & unknown>>,\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e'>, { a: number } & { obj: { e: string } }>>,\n  Expect<Equal<DeepPick<Obj, 'a' | 'obj.e' | 'obj.obj2.i'>, { a: number } & { obj: { e: string } } & { obj: { obj2: { i: boolean } } }>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/956/answer/ja\n  > 解答を見る：https://tsch.js.org/956/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}