{"id":5117,"difficulty":"medium","title":"without","code":"/*\n  5117 - Without\n  -------\n  by Pineapple (@Pineapple0919) #中級 #union #array\n\n  ### 質問\n\n  Implement the type version of Lodash.without, Without<T, U> takes an Array T, number or array U and returns an Array without the elements of U.\n\n  ```ts\n  type Res = Without<[1, 2], 1>; // expected to be [2]\n  type Res1 = Without<[1, 2, 4, 1, 5], [1, 2]>; // expected to be [4, 5]\n  type Res2 = Without<[2, 3, 2, 3, 2, 3, 2, 3], [2, 3]>; // expected to be []\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/5117/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Without<T, U> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Without<[1, 2], 1>, [2]>>,\n  Expect<Equal<Without<[1, 2, 4, 1, 5], [1, 2]>, [4, 5]>>,\n  Expect<Equal<Without<[2, 3, 2, 3, 2, 3, 2, 3], [2, 3]>, []>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/5117/answer/ja\n  > 解答を見る：https://tsch.js.org/5117/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}