{"id":90,"difficulty":"hard","title":"optional-keys","code":"/*\n  90 - Optional Keys\n  -------\n  by yituan (@yi-tuan) #上級 #utils\n\n  ### 質問\n\n  オプショナルなキーの Union を抽出する高度なユーティリティ型 `OptionalKeys<T>` を実装してください。\n\n  > GitHubで確認する：https://tsch.js.org/90/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype OptionalKeys<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<OptionalKeys<{ a: number, b?: string }>, 'b'>>,\n  Expect<Equal<OptionalKeys<{ a: undefined, b?: undefined }>, 'b'>>,\n  Expect<Equal<OptionalKeys<{ a: undefined, b?: undefined, c?: string, d?: null }>, 'b' | 'c' | 'd'>>,\n  Expect<Equal<OptionalKeys<{}>, never>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/90/answer/ja\n  > 解答を見る：https://tsch.js.org/90/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}