{"id":296,"difficulty":"medium","title":"permutation","code":"/*\n  296 - Permutation\n  -------\n  by Naoto Ikuno (@pandanoir) #中級 #union\n\n  ### 質問\n\n  Union 型を Union 型の値の順列を含む配列に変換する順列型を実装します。\n\n  ```typescript\n  type perm = Permutation<'A' | 'B' | 'C'>; // ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/296/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Permutation<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Permutation<'A'>, ['A']>>,\n  Expect<Equal<Permutation<'A' | 'B' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']>>,\n  Expect<Equal<Permutation<'B' | 'A' | 'C'>, ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']>>,\n  Expect<Equal<Permutation<boolean>, [false, true] | [true, false]>>,\n  Expect<Equal<Permutation<never>, []>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/296/answer/ja\n  > 解答を見る：https://tsch.js.org/296/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}