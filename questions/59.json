{"id":59,"title":"get-optional","difficulty":"hard","code":"/*\n  59 - Get Optional\n  -------\n  by Zheeeng (@zheeeng) #上級 #utils #infer\n\n  ### 質問\n\n  オプショナルなフィールドのみを残す高度なユーティリティ型 `GetOptional<T>` を実装してください。\n\n  例えば\n\n  ```ts\n  type I = GetOptional<{ foo: number, bar?: string }> // expected to be { bar?: string }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/59/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype GetOptional<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<GetOptional<{ foo: number, bar?: string }>, { bar?: string }>>,\n  Expect<Equal<GetOptional<{ foo: undefined, bar?: undefined }>, { bar?: undefined }>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/59/answer/ja\n  > 解答を見る：https://tsch.js.org/59/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}