{"id":21220,"title":"permutations-of-tuple","difficulty":"medium","code":"/*\n  21220 - Permutations of Tuple\n  -------\n  by null (@gaac510) #中級 #union #tuple #conditional type #recursion\n\n  ### 質問\n\n  Given a generic tuple type `T extends unknown[]`, write a type which produces all permutations of `T` as a union.\n\n  For example:\n\n  ```ts\n  PermutationsOfTuple<[1, number, unknown]>\n  // Should return:\n  // | [1, number, unknown]\n  // | [1, unknown, number]\n  // | [number, 1, unknown]\n  // | [unknown, 1, number]\n  // | [number, unknown, 1]\n  // | [unknown, number ,1]\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/21220/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype PermutationsOfTuple<T extends unknown[]> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect, ExpectFalse } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<PermutationsOfTuple<[]>, []>>,\r\n  Expect<Equal<PermutationsOfTuple<[any]>, [any]>>,\r\n  Expect<Equal<PermutationsOfTuple<[any, unknown]>, [any, unknown] | [unknown, any]>>,\r\n  Expect<Equal<\r\n    PermutationsOfTuple<[any, unknown, never]>,\r\n    | [any, unknown, never]\r\n    | [unknown, any, never]\r\n    | [unknown, never, any]\r\n    | [any, never, unknown]\r\n    | [never, any, unknown]\r\n    | [never, unknown, any]\r\n  >>,\r\n  Expect<Equal<\r\n    PermutationsOfTuple<[1, number, unknown]>,\r\n    | [1, number, unknown]\r\n    | [1, unknown, number]\r\n    | [number, 1, unknown]\r\n    | [unknown, 1, number]\r\n    | [number, unknown, 1]\r\n    | [unknown, number, 1]\r\n  >>,\r\n  ExpectFalse<Equal<PermutationsOfTuple<[ 1, number, unknown ]>, [unknown]>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/21220/answer/ja\n  > 解答を見る：https://tsch.js.org/21220/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}