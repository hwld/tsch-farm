{"id":43,"title":"exclude","difficulty":"easy","code":"/*\n  43 - Exclude\n  -------\n  by Zheeeng (@zheeeng) #初級 #built-in #union\n\n  ### 質問\n\n  組み込みの型ユーティリティ`Exclude <T, U>`を使用せず、`U`に割り当て可能な型を`T`から除外する型を実装します。\n\n  例えば：\n\n  ```ts\n  type Result = MyExclude<'a' | 'b' | 'c', 'a'> // 'b' | 'c'\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/43/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyExclude<T, U> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<MyExclude<'a' | 'b' | 'c', 'a'>, 'b' | 'c'>>,\n  Expect<Equal<MyExclude<'a' | 'b' | 'c', 'a' | 'b'>, 'c'>>,\n  Expect<Equal<MyExclude<string | number | (() => void), Function>, string | number>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/43/answer/ja\n  > 解答を見る：https://tsch.js.org/43/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}