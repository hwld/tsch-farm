{"id":11,"title":"tuple-to-object","difficulty":"easy","code":"/*\n  11 - Tuple to Object\n  -------\n  by sinoon (@sinoon) #初級 #object-keys\n\n  ### 質問\n\n  タプルを受け取り、その各値のkey/valueを持つオブジェクトの型に変換する型を実装します。\n\n  例えば：\n\n  ```ts\n  const tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\n  type result = TupleToObject<typeof tuple> // expected { 'tesla': 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/11/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype TupleToObject<T extends readonly any[]> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\nconst tupleNumber = [1, 2, 3, 4] as const\nconst sym1 = Symbol(1)\nconst sym2 = Symbol(2)\nconst tupleSymbol = [sym1, sym2] as const\nconst tupleMix = [1, '2', 3, '4', sym1] as const\n\ntype cases = [\n  Expect<Equal<TupleToObject<typeof tuple>, { 'tesla': 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y' }>>,\n  Expect<Equal<TupleToObject<typeof tupleNumber>, { 1: 1, 2: 2, 3: 3, 4: 4 }>>,\n  Expect<Equal<TupleToObject<typeof tupleSymbol>, { [sym1]: typeof sym1, [sym2]: typeof sym2 }>>,\n  Expect<Equal<TupleToObject<typeof tupleMix>, { 1: 1, '2': '2', 3: 3, '4': '4', [sym1]: typeof sym1 }>>,\n]\n\n// @ts-expect-error\ntype error = TupleToObject<[[1, 2], {}]>\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/11/answer/ja\n  > 解答を見る：https://tsch.js.org/11/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}