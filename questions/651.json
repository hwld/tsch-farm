{"id":651,"title":"length-of-string-2","difficulty":"hard","code":"/*\n  651 - Length of String 2\n  -------\n  by null (@uid11) #上級 #template-literal\n\n  ### 質問\n\n  テンプレート文字列の長さを計算する`LengthOfString<S>`を実装します。([298 - Length of String](https://tsch.js.org/298)と同じような型):\n\n  ```ts\n  type T0 = LengthOfString<'foo'>; // 3\n  ```\n\n  この課題で実装する型は、数百文字の長さの文字列をサポートしなければなりません(通常の再帰的な文字列長の計算は、TS の再帰的な関数呼び出しの深さによって制限されています、つまり、45 文字程度までの文字列をサポートしています)。\n\n  > GitHubで確認する：https://tsch.js.org/651/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype LengthOfString<S extends string> = number\n\n/* _____________ テストケース _____________ */\nimport type { Equal, IsTrue } from '@type-challenges/utils'\n\ntype cases = [\n  IsTrue<Equal<LengthOfString<''>, 0>>,\n  IsTrue<Equal<LengthOfString<'1'>, 1>>,\n  IsTrue<Equal<LengthOfString<'12'>, 2>>,\n  IsTrue<Equal<LengthOfString<'123'>, 3>>,\n  IsTrue<Equal<LengthOfString<'1234'>, 4>>,\n  IsTrue<Equal<LengthOfString<'12345'>, 5>>,\n  IsTrue<Equal<LengthOfString<'123456'>, 6>>,\n  IsTrue<Equal<LengthOfString<'1234567'>, 7>>,\n  IsTrue<Equal<LengthOfString<'12345678'>, 8>>,\n  IsTrue<Equal<LengthOfString<'123456789'>, 9>>,\n  IsTrue<Equal<LengthOfString<'1234567890'>, 10>>,\n  IsTrue<Equal<LengthOfString<'12345678901'>, 11>>,\n  IsTrue<Equal<LengthOfString<'123456789012'>, 12>>,\n  IsTrue<Equal<LengthOfString<'1234567890123'>, 13>>,\n  IsTrue<Equal<LengthOfString<'12345678901234'>, 14>>,\n  IsTrue<Equal<LengthOfString<'123456789012345'>, 15>>,\n  IsTrue<Equal<LengthOfString<'1234567890123456'>, 16>>,\n  IsTrue<Equal<LengthOfString<'12345678901234567'>, 17>>,\n  IsTrue<Equal<LengthOfString<'123456789012345678'>, 18>>,\n  IsTrue<Equal<LengthOfString<'1234567890123456789'>, 19>>,\n  IsTrue<Equal<LengthOfString<'12345678901234567890'>, 20>>,\n  IsTrue<Equal<LengthOfString<'123456789012345678901'>, 21>>,\n  IsTrue<Equal<LengthOfString<'1234567890123456789012'>, 22>>,\n  IsTrue<Equal<LengthOfString<'12345678901234567890123'>, 23>>,\n  IsTrue<Equal<LengthOfString<'aaaaaaaaaaaaggggggggggggggggggggkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>, 272>>,\n  IsTrue<Equal<LengthOfStringn]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/651/answer/ja\n  > 解答を見る：https://tsch.js.org/651/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}