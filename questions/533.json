{"id":533,"title":"concat","difficulty":"easy","code":"/*\n  533 - Concat\n  -------\n  by Andrey Krasovsky (@bre30kra69cs) #初級 #array\n\n  ### 質問\n\n  JavaScript の`Array.concat`関数を型システムに実装します。この型は 2 つの引数を受け取り、受け取ったイテレータの要素を順に含む新しい配列を返します。\n\n  例えば：\n\n  ```ts\n  type Result = Concat<[1], [2]>; // expected to be [1, 2]\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/533/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Concat<T, U> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst tuple = [1] as const\n\ntype cases = [\n  Expect<Equal<Concat<[], []>, []>>,\n  Expect<Equal<Concat<[], [1]>, [1]>>,\n  Expect<Equal<Concat<typeof tuple, typeof tuple>, [1, 1]>>,\n  Expect<Equal<Concat<[1, 2], [3, 4]>, [1, 2, 3, 4]>>,\n  Expect<Equal<Concat<['1', 2, '3'], [false, boolean, '4']>, ['1', 2, '3', false, boolean, '4']>>,\n]\n\n// @ts-expect-error\ntype error = Concat<null, undefined>\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/533/answer/ja\n  > 解答を見る：https://tsch.js.org/533/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}