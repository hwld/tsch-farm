{"id":2757,"difficulty":"medium","title":"partialbykeys","code":"/*\n  2757 - PartialByKeys\n  -------\n  by jiangshan (@jiangshanmeta) #中級 #object\n\n  ### 質問\n\n  Implement a generic `PartialByKeys<T, K>` which takes two type argument `T` and `K`.\n\n  `K` specify the set of properties of `T` that should set to be optional. When `K` is not provided, it should make all properties optional just like the normal `Partial<T>`.\n\n  For example\n\n  ```typescript\n  interface User {\n    name: string\n    age: number\n    address: string\n  }\n\n  type UserPartialName = PartialByKeys<User, 'name'> // { name?:string; age:number; address:string }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/2757/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype PartialByKeys<T, K> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ninterface User {\n  name: string\n  age: number\n  address: string\n}\n\ninterface UserPartialName {\n  name?: string\n  age: number\n  address: string\n}\n\ninterface UserPartialNameAndAge {\n  name?: string\n  age?: number\n  address: string\n}\n\ntype cases = [\n  Expect<Equal<PartialByKeys<User, 'name'>, UserPartialName>>,\n  Expect<Equal<PartialByKeys<User, 'name' | 'age'>, UserPartialNameAndAge>>,\n  Expect<Equal<PartialByKeys<User>, Partial<User>>>,\n  // @ts-expect-error\n  Expect<Equal<PartialByKeys<User, 'name' | 'unknown'>, UserPartialName>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/2757/answer/ja\n  > 解答を見る：https://tsch.js.org/2757/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}