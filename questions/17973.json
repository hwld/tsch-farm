{"id":17973,"title":"deepmutable","difficulty":"medium","code":"/*\n  17973 - DeepMutable\n  -------\n  by cutefcc (@cutefcc) #中級 #readonly #deep\n\n  ### 質問\n\n  Implement a generic DeepMutable<T> which make every parameter of an object - and its sub-objects recursively - mutable.\n\n  For example\n\n  ```ts\n  type X = {\n    readonly a: () => 1\n    readonly b: string\n    readonly c: {\n      readonly d: boolean\n      readonly e: {\n        readonly g: {\n          readonly h: {\n            readonly i: true\n            readonly j: \"s\"\n          }\n          readonly k: \"hello\"\n        }\n      }\n    }\n  }\n\n  type Expected = {\n    a: () => 1\n    b: string\n    c: {\n      d: boolean\n      e: {\n        g: {\n          h: {\n            i: true\n            j: \"s\"\n          }\n          k: \"hello\"\n        }\n      }\n    }\n  }\n\n  type Todo = DeepMutable<X> // should be same as `Expected`\n  ```\n\n  You can assume that we are only dealing with Objects in this challenge. Arrays, Functions, Classes and so on do not need to be taken into consideration. However, you can still challenge yourself by covering as many different cases as possible.\n\n  > GitHubで確認する：https://tsch.js.org/17973/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DeepMutable = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\r\ninterface Test1 {\r\n  readonly title: string\r\n  readonly description: string\r\n  readonly completed: boolean\r\n  readonly meta: {\r\n    readonly author: string\r\n  }\r\n}\r\ntype Test2 = {\r\n  readonly a: () => 1\r\n  readonly b: string\r\n  readonly c: {\r\n    readonly d: boolean\r\n    readonly e: {\r\n      readonly g: {\r\n        readonly h: {\r\n          readonly i: true\r\n          readonly j: 's'\r\n        }\r\n        readonly k: 'hello'\r\n      }\r\n      readonly l: readonly [\r\n        'hi',\r\n        {\r\n          readonly m: readonly ['hey']\r\n        },\r\n      ]\r\n    }\r\n  }\r\n}\r\ninterface DeepMutableTest1 {\r\n  title: string\r\n  description: string\r\n  completed: boolean\r\n  meta: {\r\n    author: string\r\n  }\r\n}\r\n\r\ntype DeepMutableTest2 = {\r\n  a: () => 1\r\n  b: string\r\n  c: {\r\n    d: boolean\r\n    e: {\r\n      g: {\r\n        h: {\r\n          i: true\r\n          j: 's'\r\n        }\r\n        k: 'hello'\r\n      }\r\n      l: [\r\n        'hi',\r\n        {\r\n          m: ['hey']\r\n        },\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<DeepMutable<Test1>, DeepMutableTest1>>,\r\n  Expect<Equal<DeepMutable<Test2>, DeepMutableTest2>>,\r\n]\r\n\r\ntype errors = [\r\n  // @ts-expect-error\r\n  DeepMutable<'string'>,\r\n  // @ts-expect-error\r\n  DeepMutable<0>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/17973/answer/ja\n  > 解答を見る：https://tsch.js.org/17973/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}