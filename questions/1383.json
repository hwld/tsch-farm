{"id":1383,"difficulty":"hard","title":"camelize","code":"/*\n  1383 - Camelize\n  -------\n  by Denis (@denchiklut) #上級 #union #recursion\n\n  ### 質問\n\n  Implement Camelize which converts object from snake_case to to camelCase\n\n  ```ts\n  Camelize<{\n    some_prop: string,\n    prop: { another_prop: string },\n    array: [{ snake_case: string }]\n  }>\n\n  // expected to be\n  // {\n  //   someProp: string,\n  //   prop: { anotherProp: string },\n  //   array: [{ snakeCase: string }]\n  // }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/1383/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Camelize<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<\n    Camelize<{\n      some_prop: string\n      prop: { another_prop: string }\n      array: [\n        { snake_case: string },\n        { another_element: { yet_another_prop: string } },\n        { yet_another_element: string },\n      ]\n    }>,\n    {\n      someProp: string\n      prop: { anotherProp: string }\n      array: [\n        { snakeCase: string },\n        { anotherElement: { yetAnotherProp: string } },\n        { yetAnotherElement: string },\n      ]\n    }\n  >>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/1383/answer/ja\n  > 解答を見る：https://tsch.js.org/1383/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}