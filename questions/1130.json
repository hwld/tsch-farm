{"id":1130,"difficulty":"medium","title":"replacekeys","code":"/*\n  1130 - ReplaceKeys\n  -------\n  by 贱贱 (@lullabyjune) #中級 #object-keys\n\n  ### 質問\n\n  Implement a type ReplaceKeys, that replace keys in union types, if some type has not this key, just skip replacing,\n  A type takes three arguments.\n\n  For example:\n\n  ```ts\n  type NodeA = {\n    type: \"A\"\n    name: string\n    flag: number\n  }\n\n  type NodeB = {\n    type: \"B\"\n    id: number\n    flag: number\n  }\n\n  type NodeC = {\n    type: \"C\"\n    name: string\n    flag: number\n  }\n\n  type Nodes = NodeA | NodeB | NodeC\n\n  type ReplacedNodes = ReplaceKeys<\n    Nodes,\n    \"name\" | \"flag\",\n    { name: number; flag: string }\n  > // {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.\n\n  type ReplacedNotExistKeys = ReplaceKeys<Nodes, \"name\", { aa: number }> // {type: 'A', name: never, flag: number} | NodeB | {type: 'C', name: never, flag: number} // would replace name to never\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/1130/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype ReplaceKeys<U, T, Y> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype NodeA = {\n  type: 'A'\n  name: string\n  flag: number\n}\n\ntype NodeB = {\n  type: 'B'\n  id: number\n  flag: number\n}\n\ntype NodeC = {\n  type: 'C'\n  name: string\n  flag: number\n}\n\ntype ReplacedNodeA = {\n  type: 'A'\n  name: number\n  flag: string\n}\n\ntype ReplacedNodeB = {\n  type: 'B'\n  id: number\n  flag: string\n}\n\ntype ReplacedNodeC = {\n  type: 'C'\n  name: number\n  flag: string\n}\n\ntype NoNameNodeA = {\n  type: 'A'\n  flag: number\n  name: never\n}\n\ntype NoNameNodeC = {\n  type: 'C'\n  flag: number\n  name: never\n}\n\ntype Nodes = NodeA | NodeB | NodeC\ntype ReplacedNodes = ReplacedNodeA | ReplacedNodeB | ReplacedNodeC\ntype NodesNoName = NoNameNodeA | NoNameNodeC | NodeB\n\ntype cases = [\n  Expect<Equal<ReplaceKeys<Nodes, 'name' | 'flag', { name: number, flag: string }>, ReplacedNodes>>,\n  Expect<Equal<ReplaceKeys<Nodes, 'name', { aa: number }>, NodesNoName>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/1130/answer/ja\n  > 解答を見る：https://tsch.js.org/1130/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}