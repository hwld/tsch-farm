{"id":5821,"difficulty":"medium","title":"maptypes","code":"/*\n  5821 - MapTypes\n  -------\n  by Krzysztof \"Wokay\" Łokaj (@wokayme) #中級 #map #object #utils\n\n  ### 質問\n\n  Implement `MapTypes<T, R>` which will transform types in object T to different types defined by type R which has the following structure\n\n  ```ts\n  type StringToNumber = {\n    mapFrom: string; // value of key which value is string\n    mapTo: number; // will be transformed for number\n  }\n  ```\n\n  ## Examples:\n\n  ```ts\n  type StringToNumber = { mapFrom: string; mapTo: number;}\n  MapTypes<{iWillBeANumberOneDay: string}, StringToNumber> // gives { iWillBeANumberOneDay: number; }\n  ```\n\n  Be aware that user can provide a union of types:\n  ```ts\n  type StringToNumber = { mapFrom: string; mapTo: number;}\n  type StringToDate = { mapFrom: string; mapTo: Date;}\n  MapTypes<{iWillBeNumberOrDate: string}, StringToDate | StringToNumber> // gives { iWillBeNumberOrDate: number | Date; }\n  ```\n\n  If the type doesn't exist in our map, leave it as it was:\n  ```ts\n  type StringToNumber = { mapFrom: string; mapTo: number;}\n  MapTypes<{iWillBeANumberOneDay: string, iWillStayTheSame: Function}, StringToNumber> // // gives { iWillBeANumberOneDay: number, iWillStayTheSame: Function }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/5821/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MapTypes<T, R> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<MapTypes<{ stringToArray: string }, { mapFrom: string, mapTo: [] }>, { stringToArray: [] }>>,\n  Expect<Equal<MapTypes<{ stringToNumber: string }, { mapFrom: string, mapTo: number }>, { stringToNumber: number }>>,\n  Expect<Equal<MapTypes<{ stringToNumber: string, skipParsingMe: boolean }, { mapFrom: string, mapTo: number }>, { stringToNumber: number, skipParsingMe: boolean }>>,\n  Expect<Equal<MapTypes<{ date: string }, { mapFrom: string, mapTo: Date } | { mapFrom: string, mapTo: null }>, { date: null | Date }>>,\n  Expect<Equal<MapTypes<{ date: string }, { mapFrom: string, mapTo: Date | null }>, { date: null | Date }>>,\n  Expect<Equal<MapTypes<{ fields: Record<string, boolean> }, { mapFrom: Record<string, boolean>, mapTo: string[] }>, { fields: string[] }>>,\n  Expect<Equal<MapTypes<{ name: string }, { mapFrom: boolean, mapTo: never }>, { name: string }>>,\n  Expect<Equal<MapTypes<{ name: string, date: Date }, { mapFrom: string, mapTo: boolean } | { mapFrom: Date, mapTo: string }>, { name: boolean, date: string }>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/5821/answer/ja\n  > 解答を見る：https://tsch.js.org/5821/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}