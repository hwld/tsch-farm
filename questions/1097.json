{"id":1097,"difficulty":"medium","title":"isunion","code":"/*\n  1097 - IsUnion\n  -------\n  by null (@bencor) #中級 #union\n\n  ### 質問\n\n  Implement a type `IsUnion`, which takes an input type `T` and returns whether `T` resolves to a union type.\n\n  For example:\n\n  ```ts\n  type case1 = IsUnion<string> // false\n  type case2 = IsUnion<string | number> // true\n  type case3 = IsUnion<[string | number]> // false\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/1097/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype IsUnion<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<IsUnion<string>, false>>,\n  Expect<Equal<IsUnion<string | number>, true>>,\n  Expect<Equal<IsUnion<'a' | 'b' | 'c' | 'd'>, true>>,\n  Expect<Equal<IsUnion<undefined | null | void | ''>, true>>,\n  Expect<Equal<IsUnion<{ a: string } | { a: number }>, true>>,\n  Expect<Equal<IsUnion<{ a: string | number }>, false>>,\n  Expect<Equal<IsUnion<[string | number]>, false>>,\n  // Cases where T resolves to a non-union type.\n  Expect<Equal<IsUnion<string | never>, false>>,\n  Expect<Equal<IsUnion<string | unknown>, false>>,\n  Expect<Equal<IsUnion<string | any>, false>>,\n  Expect<Equal<IsUnion<string | 'a'>, false>>,\n  Expect<Equal<IsUnion<never>, false>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/1097/answer/ja\n  > 解答を見る：https://tsch.js.org/1097/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}