{"id":1290,"difficulty":"hard","title":"pinia","code":"/*\n  1290 - Pinia\n  -------\n  by Pig Fang (@g-plane) #上級 #this #vue\n\n  ### 質問\n\n  Create a type-level function whose types is similar to [Pinia](https://github.com/posva/pinia) library. You don't need to implement function actually, just adding types.\n\n  ### Overview\n\n  This function receive only one parameter whose type is an object. The object contains 4 properties:\n\n  - `id` - just a string (required)\n  - `state` - a function which will return an object as store's state (required)\n  - `getters` - an object with methods which is similar to Vue's computed values or Vuex's getters, and details are below (optional)\n  - `actions` - an object with methods which can do side effects and mutate state, and details are below (optional)\n\n  ### Getters\n\n  When you define a store like this:\n\n  ```typescript\n  const store = defineStore({\n    // ...other required fields\n    getters: {\n      getSomething() {\n        return 'xxx'\n      }\n    }\n  })\n  ```\n\n  And you should use it like this:\n\n  ```typescript\n  store.getSomething\n  ```\n\n  instead of:\n\n  ```typescript\n  store.getSomething()  // error\n  ```\n\n  Additionally, getters can access state and/or other getters via `this`, but state is read-only.\n\n  ### Actions\n\n  When you define a store like this:\n\n  ```typescript\n  const store = defineStore({\n    // ...other required fields\n    actions: {\n      doSideEffect() {\n        this.xxx = 'xxx'\n        return 'ok'\n      }\n    }\n  })\n  ```\n\n  Using it is just to call it:\n\n  ```typescript\n  const returnValue = store.doSideEffect()\n  ```\n\n  Actions can return any value or return nothing, and it can receive any number of parameters with different types.\n  Parameters types and return type can't be lost, which means type-checking must be available at call side.\n\n  State can be accessed and mutated via `this`. Getters can be accessed via `this` but they're read-only.\n\n  > GitHubで確認する：https://tsch.js.org/1290/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ndeclare function defineStore(store: unknown): unknown\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst store = defineStore({\n  id: '',\n  state: () => ({\n    num: 0,\n    str: '',\n  }),\n  getters: {\n    stringifiedNum() {\n      // @ts-expect-error\n      this.num += 1\n\n      return this.num.toString()\n    },\n    parsedNum() {\n      return Number.parseInt(this.stringifiedNum)\n    },\n  },\n  actions: {\n    init() {\n      this.reset()\n      this.increment()\n    },\n    increment(step = 1) {\n      this.num += step\n    },\n    reset() {\n      this.num = 0\n\n      // @ts-expect-error\n      this.parsedNum = 0\n\n      return true\n    },\n    setNum(value: number) {\n      this.num = value\n    },\n  },\n})\n\n// @ts-expect-error\nstore.nopeStateProp\n// @ts-expect-error\nstore.nopeGetter\n// @ts-expect-error\nstore.stringifiedNum()\nstore.init()\n// @ts-expect-error\nstore.init(0)\nstore.increment()\nstore.increment(2)\n// @ts-expect-error\nstore.setNum()\n// @ts-expect-error\nstore.setNum('3')\nstore.setNum(3)\nconst r = store.reset()\n\ntype _tests = [\n  Expect<Equal<typeof store.num, number>>,\n  Expect<Equal<typeof store.str, string>>,\n  Expect<Equal<typeof store.stringifiedNum, string>>,\n  Expect<Equal<typeof store.parsedNum, number>>,\n  Expect<Equal<typeof r, true>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/1290/answer/ja\n  > 解答を見る：https://tsch.js.org/1290/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}