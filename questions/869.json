{"id":869,"difficulty":"extreme","title":"distributeunions","code":"/*\n  869 - DistributeUnions\n  -------\n  by Gabriel Vergnaud (@gvergnaud) #最上級\n\n  ### 質問\n\n  Implement a type `Distribute Unions`, that turns a type of data structure containing union types into a union of\n  all possible types of permitted data structures that don't contain any union. The data structure can be any\n  combination of objects and tuples on any level of nesting.\n\n  For example:\n\n  ```ts\n  type T1 = DistributeUnions<[1 | 2, 'a' | 'b']>\n  // =>   [1, 'a'] | [2, 'a'] | [1, 'b'] | [2, 'b']\n\n  type T2 = DistributeUnions<{ type: 'a', value: number | string } | { type: 'b', value: boolean }>\n  //  =>  | { type 'a', value: number }\n  //      | { type 'a', value: string }\n  //      | { type 'b', value: boolean }\n\n  type T3 = DistributeUnions<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17>\n  //  =>  | [{ value: 'a' },  { x: { y: 2  } }]\n  //      | [{ value: 'a' },  { x: { y: 3  } }]\n  //      | [{ value: 'b' },  { x: { y: 2  } }]\n  //      | [{ value: 'b' },  { x: { y: 3  } }]\n  //      | 17\n  ```\n\n  For context, this type can be very useful if you want to exclude a case on deep data structures:\n\n  ```ts\n  type ExcludeDeep<A, B> = Exclude<DistributeUnions<A>, B>\n\n  type T0 = ExcludeDeep<[{ value: 'a' | 'b' },  { x: { y: 2 | 3  } }] | 17, [{ value: 'a' },  any]>\n  //  =>  | [{ value: 'b' },  { x: { y: 2  } }]\n  //      | [{ value: 'b' },  { x: { y: 3  } }]\n  //      | 17\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/869/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DistributeUnions<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  // Already distributed unions should stay the same:\n  Expect<Equal<DistributeUnions<1>, 1>>,\n  Expect<Equal<DistributeUnions<string>, string>>,\n  Expect<Equal<DistributeUnions<1 | 2>, 1 | 2>>,\n  Expect<Equal<DistributeUnions<'b' | { type: 'a' } | [1]>, 'b' | { type: 'a' } | [1]>>,\n  // tuples:\n  Expect<Equal<DistributeUnions<[1 | 2, 3]>, [1, 3] | [2, 3]>>,\n  Expect<Equal<DistributeUnions<[1 | 2, 'a' | 'b']>, [1, 'a'] | [1, 'b'] | [2, 'a'] | [2, 'b']>>,\n  Expect<\n  Equal<\n  DistributeUnions<[1 | 2, 'a' | 'b', false | true]>,\n  | [1, 'a', false]\n  | [1, 'a', true]\n  | [1, 'b', false]\n  | [1, 'b', true]\n  | [2, 'a', false]\n  | [2, 'a', true]\n  | [2, 'b', false]\n  | [2, 'b', true]\n  >\n  >,\n  // objects\n  Expect<\n  Equal<\n  DistributeUnions<{ x: 'a' | 'b', y: 'c' | 'd' }>,\n  { x: 'a', y: 'c' } | { x: 'a', y: 'd' } | { x: 'b', y: 'c' } | { x: 'b', y: 'd' }\n  >\n  >,\n  Expect<\n  Equal<\n  DistributeUnions<{ type: 'a', value: number | string } | { type: 'b', value: boolean }>,\n  | { type: 'a', value: string }\n  | { type: 'a', value: number }\n  | { type: 'b', value: false }\n  | { type: 'b', value: true }\n  >\n  >,\n  Expect<\n  Equal<\n  DistributeUnions<\n    | {\n      type: 'a'\n      option: { kind: 'none' } | { kind: 'some', value: 'x' | 'y' }\n    }\n    | { type: 'b', msg: string }\n  >,\n  | { type: 'b', msg: string }\n  | { type: 'a', option: { kind: 'none' } }\n  | { type: 'a', option: { kind: 'some', value: 'x' } }\n  | { type: 'a', option: { kind: 'some', value: 'y' } }\n  >\n  >,\n  // mixed structures:\n  Expect<\n  Equal<\n  DistributeUnions<[false | true, { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\n  | [false, { value: 'a' }, { x: { y: 2 } }]\n  | [false, { value: 'a' }, { x: { y: 3 } }]\n  | [false, { value: 'b' }, { x: { y: 2 } }]\n  | [false, { value: 'b' }, { x: { y: 3 } }]\n  | [true, { value: 'a' }, { x: { y: 2 } }]\n  | [true, { value: 'a' }, { x: { y: 3 } }]\n  | [true, { value: 'b' }, { x: { y: 2 } }]\n  | [true, { value: 'b' }, { x: { y: 3 } }]\n  >\n  >,\n  Expect<\n  Equal<\n  DistributeUnions<17 | [10 | { value: 'a' | 'b' }, { x: { y: 2 | 3 } }]>,\n  | 17\n  | [10, { x: { y: 2 } }]\n  | [10, { x: { y: 3 } }]\n  | [{ value: 'a' }, { x: { y: 2 } }]\n  | [{ value: 'a' }, { x: { y: 3 } }]\n  | [{ value: 'b' }, { x: { y: 2 } }]\n  | [{ value: 'b' }, { x: { y: 3 } }]\n  >\n  >,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/869/answer/ja\n  > 解答を見る：https://tsch.js.org/869/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}