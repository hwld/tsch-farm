{"id":9,"difficulty":"medium","title":"deep-readonly","code":"/*\n  9 - Deep Readonly\n  -------\n  by Anthony Fu (@antfu) #中級 #readonly #object-keys #deep\n\n  ### 質問\n\n  オブジェクトのすべてのパラメーター（およびそのサブオブジェクトを再帰的に）を読み取り専用にする`DeepReadonly<T>`を実装します。\n\n  この課題ではオブジェクトのみを扱っていると想定してください。配列、関数、クラスなどは考慮する必要はありません。しかし、可能な限り様々なケースをカバーすることで、自分自身に挑戦することができます。\n\n  例えば\n\n  ```ts\n  type X = {\n    x: {\n      a: 1\n      b: 'hi'\n    }\n    y: 'hey'\n  }\n\n  type Expected = {\n    readonly x: {\n      readonly a: 1\n      readonly b: 'hi'\n    }\n    readonly y: 'hey'\n  }\n\n  type Todo = DeepReadonly<X> // should be same as `Expected`\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/9/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype DeepReadonly<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<DeepReadonly<X1>, Expected1>>,\n  Expect<Equal<DeepReadonly<X2>, Expected2>>,\n]\n\ntype X1 = {\n  a: () => 22\n  b: string\n  c: {\n    d: boolean\n    e: {\n      g: {\n        h: {\n          i: true\n          j: 'string'\n        }\n        k: 'hello'\n      }\n      l: [\n        'hi',\n        {\n          m: ['hey']\n        },\n      ]\n    }\n  }\n}\n\ntype X2 = { a: string } | { b: number }\n\ntype Expected1 = {\n  readonly a: () => 22\n  readonly b: string\n  readonly c: {\n    readonly d: boolean\n    readonly e: {\n      readonly g: {\n        readonly h: {\n          readonly i: true\n          readonly j: 'string'\n        }\n        readonly k: 'hello'\n      }\n      readonly l: readonly [\n        'hi',\n        {\n          readonly m: readonly ['hey']\n        },\n      ]\n    }\n  }\n}\n\ntype Expected2 = { readonly a: string } | { readonly b: number }\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/9/answer/ja\n  > 解答を見る：https://tsch.js.org/9/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}