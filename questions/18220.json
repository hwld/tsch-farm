{"id":18220,"difficulty":"medium","title":"filter","code":"/*\n  18220 - Filter\n  -------\n  by Muhun Kim (@x86chi) #中級 #array #filter\n\n  ### 質問\n\n  Implement the type `Filter<T, Predicate>` takes an Array `T`, primitive type or union primitive type `Predicate` and returns an Array include the elements of `Predicate`.\n\n  > GitHubで確認する：https://tsch.js.org/18220/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype Filter<T extends any[], P> = []\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype Falsy = false | 0 | '' | null | undefined\r\n\r\ntype cases = [\r\n  Expect<Equal<Filter<[0, 1, 2], 2>, [2]>>,\r\n  Expect<Equal<Filter<[0, 1, 2], 0 | 1>, [0, 1]>>,\r\n  Expect<Equal<Filter<[0, 1, 2], Falsy>, [0]>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/18220/answer/ja\n  > 解答を見る：https://tsch.js.org/18220/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}