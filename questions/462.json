{"id":462,"difficulty":"extreme","title":"currying-2","code":"/*\n  462 - Currying 2\n  -------\n  by Kim (@hubvue) #最上級\n\n  ### 質問\n\n  [Currying](https://en.wikipedia.org/wiki/Currying) is the technique of converting a function that takes multiple arguments into a sequence of functions that each take a single argument.\n\n  But in our daily life, currying dynamic arguments is also commonly used, for example, the `Function.bind(this, [...params])` API.\n\n  ```ts\n  const func = (a: number, b: number, c: number) => {\n    return a + b + c\n  }\n\n  const bindFunc = func(null, 1, 2)\n\n  const result = bindFunc(3) // result: 6\n  ```\n\n  Thus, based on `Currying 1`, we would need to have the dynamic argument version:\n\n  ```ts\n  const add = (a: number, b: number, c: number) => a + b + c\n  const three = add(1, 1, 1)\n\n  const curriedAdd = DynamicParamsCurrying(add)\n  const six = curriedAdd(1, 2, 3)\n  const seven = curriedAdd(1, 2)(4)\n  const nine = curriedAdd(2)(3)(4)\n  ```\n\n  In this challenge, `DynamicParamsCurrying` may take a function with zero to multiple arguments, you need to correctly type it. The returned function may accept at least one argument. When all the arguments as satisfied, it should yield the return type of the original function correctly.\n\n  > GitHubで確認する：https://tsch.js.org/462/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ndeclare function DynamicParamsCurrying(fn: any): any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst curried1 = DynamicParamsCurrying((a: string, b: number, c: boolean) => true)\nconst curried2 = DynamicParamsCurrying((a: string, b: number, c: boolean, d: boolean, e: boolean, f: string, g: boolean) => true)\n\nconst curried1Return1 = curried1('123')(123)(true)\nconst curried1Return2 = curried1('123', 123)(false)\nconst curried1Return3 = curried1('123', 123, true)\n\nconst curried2Return1 = curried2('123')(123)(true)(false)(true)('123')(false)\nconst curried2Return2 = curried2('123', 123)(true, false)(true, '123')(false)\nconst curried2Return3 = curried2('123', 123)(true)(false)(true, '123', false)\nconst curried2Return4 = curried2('123', 123, true)(false, true, '123')(false)\nconst curried2Return5 = curried2('123', 123, true)(false)(true)('123')(false)\nconst curried2Return6 = curried2('123', 123, true, false)(true, '123', false)\nconst curried2Return7 = curried2('123', 123, true, false, true)('123', false)\nconst curried2Return8 = curried2('123', 123, true, false, true)('123')(false)\nconst curried2Return9 = curried2('123', 123, true, false, true, '123')(false)\nconst curried2Return10 = curried2('123', 123, true, false, true, '123', false)\n\n// @ts-expect-error\nconst curried1ReturnWrong = curried1('123')(123)('wrong arg type')\n// @ts-expect-error\nconst curried1ReturnWrong2 = curried1('123')()(123)(true)\n\ntype cases = [\n  Expect<Equal< typeof curried1Return1, boolean>>,\n  Expect<Equal< typeof curried1Return2, boolean>>,\n  Expect<Equal< typeof curried1Return3, boolean>>,\n\n  Expect<Equal< typeof curried2Return1, boolean>>,\n  Expect<Equal< typeof curried2Return2, boolean>>,\n  Expect<Equal< typeof curried2Return3, boolean>>,\n  Expect<Equal< typeof curried2Return4, boolean>>,\n  Expect<Equal< typeof curried2Return5, boolean>>,\n  Expect<Equal< typeof curried2Return6, boolean>>,\n  Expect<Equal< typeof curried2Return7, boolean>>,\n  Expect<Equal< typeof curried2Return8, boolean>>,\n  Expect<Equal< typeof curried2Return9, boolean>>,\n  Expect<Equal< typeof curried2Return10, boolean>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/462/answer/ja\n  > 解答を見る：https://tsch.js.org/462/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}