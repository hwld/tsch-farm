{"id":2759,"title":"requiredbykeys","difficulty":"medium","code":"/*\n  2759 - RequiredByKeys\n  -------\n  by jiangshan (@jiangshanmeta) #中級 #object\n\n  ### 質問\n\n  Implement a generic `RequiredByKeys<T,  K>` which takes two type argument `T` and `K`.\n\n  `K` specify the set of properties of `T` that should set to be required. When `K` is not provided, it should make all properties required just like the normal `Required<T>`.\n\n  For example\n\n  ```typescript\n  interface User {\n    name?: string\n    age?: number\n    address?: string\n  }\n\n  type UserRequiredName = RequiredByKeys<User, 'name'> // { name: string; age?: number; address?: string }\n\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/2759/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype RequiredByKeys<T, K> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ninterface User {\n  name?: string\n  age?: number\n  address?: string\n}\n\ninterface UserRequiredName {\n  name: string\n  age?: number\n  address?: string\n}\n\ninterface UserRequiredNameAndAge {\n  name: string\n  age: number\n  address?: string\n}\n\ntype cases = [\n  Expect<Equal<RequiredByKeys<User, 'name'>, UserRequiredName>>,\n  Expect<Equal<RequiredByKeys<User, 'name' | 'age'>, UserRequiredNameAndAge>>,\n  Expect<Equal<RequiredByKeys<User>, Required<User>>>,\n  // @ts-expect-error\n  Expect<Equal<RequiredByKeys<User, 'name' | 'unknown'>, UserRequiredName>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/2759/answer/ja\n  > 解答を見る：https://tsch.js.org/2759/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}