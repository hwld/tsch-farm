{"id":17,"difficulty":"hard","title":"currying-1","code":"/*\n  17 - Currying 1\n  -------\n  by Anthony Fu (@antfu) #上級 #array\n\n  ### 質問\n\n  > この課題ではTypeScript 4.0が推奨されます\n\n  [カリー化](https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96)とは、複数の引数を取る関数を、それぞれの 1 つの引数を取る関数の列に変換するテクニックです。\n\n  例えば：\n\n  ```ts\n  const add = (a: number, b: number) => a + b\n  const three = add(1, 2)\n\n  const curriedAdd = Currying(add)\n  const five = curriedAdd(2)(3)\n  ```\n\n  `Currying` に渡された関数は複数の引数を持つ場合があり、正しく型を付ける必要があります。\n\n  この課題では、カリー化された関数は一度に 1 つの引数しか受け付けません。すべての引数が代入されたら、その結果を返す必要があります。\n\n  > GitHubで確認する：https://tsch.js.org/17/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ndeclare function Currying(fn: any): any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nconst curried1 = Currying((a: string, b: number, c: boolean) => true)\nconst curried2 = Currying((a: string, b: number, c: boolean, d: boolean, e: boolean, f: string, g: boolean) => true)\nconst curried3 = Currying(() => true)\n\ntype cases = [\n  Expect<Equal<\n    typeof curried1,\n(a: string) => (b: number) => (c: boolean) => true\n  >>,\n  Expect<Equal<\n    typeof curried2,\n(a: string) => (b: number) => (c: boolean) => (d: boolean) => (e: boolean) => (f: string) => (g: boolean) => true\n  >>,\n  Expect<Equal<typeof curried3, () => true>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/17/answer/ja\n  > 解答を見る：https://tsch.js.org/17/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}