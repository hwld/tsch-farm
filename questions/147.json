{"id":147,"difficulty":"hard","title":"c-printf-parser","code":"/*\n  147 - C-printf Parser\n  -------\n  by Pig Fang (@g-plane) #上級 #template-literal\n\n  ### 質問\n\n  C 言語には`printf`という関数があり、以下のようにフォーマットして出力してくれます。\n\n  ```c\n  printf(\"The result is %d.\", 42);\n  ```\n\n  この課題では、入力値の文字列をパースして`%d`や`%f`のようなフォーマットのプレースホルダーを抜き出します。\n  例えば、もし入力文字列が`\"The result is %d\"`であるなら、パースした結果は`['dec']`というタプルになります。\n\n  マッピングは以下となります。\n\n  ```typescript\n  type ControlsMap = {\n    c: 'char';\n    s: 'string';\n    d: 'dec';\n    o: 'oct';\n    h: 'hex';\n    f: 'float';\n    p: 'pointer';\n  };\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/147/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype ControlsMap = {\n  c: 'char'\n  s: 'string'\n  d: 'dec'\n  o: 'oct'\n  h: 'hex'\n  f: 'float'\n  p: 'pointer'\n}\n\ntype ParsePrintFormat = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<ParsePrintFormat<''>, []>>,\n  Expect<Equal<ParsePrintFormat<'Any string.'>, []>>,\n  Expect<Equal<ParsePrintFormat<'The result is %d.'>, ['dec']>>,\n  Expect<Equal<ParsePrintFormat<'The result is %%d.'>, []>>,\n  Expect<Equal<ParsePrintFormat<'The result is %%%d.'>, ['dec']>>,\n  Expect<Equal<ParsePrintFormat<'The result is %f.'>, ['float']>>,\n  Expect<Equal<ParsePrintFormat<'The result is %h.'>, ['hex']>>,\n  Expect<Equal<ParsePrintFormat<'The result is %q.'>, []>>,\n  Expect<Equal<ParsePrintFormat<'Hello %s: score is %d.'>, ['string', 'dec']>>,\n  Expect<Equal<ParsePrintFormat<'The result is %'>, []>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/147/answer/ja\n  > 解答を見る：https://tsch.js.org/147/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}