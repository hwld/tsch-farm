{"id":3312,"difficulty":"easy","title":"parameters","code":"/*\n  3312 - Parameters\n  -------\n  by midorizemi (@midorizemi) #初級 #infer #tuple #built-in\n\n  ### 質問\n\n  組み込みの型ユーティリティ`Parameters<T>`を使用せず、`T`からタプル型を構築する型を実装します。\n\n  例えば：\n\n  ```ts\n  const foo = (arg1: string, arg2: number): void => {}\n\n  type FunctionParamsType = MyParameters<typeof foo> // [arg1: string, arg2: number]\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/3312/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MyParameters<T extends (...args: any[]) => any> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\nfunction foo(arg1: string, arg2: number): void {}\nfunction bar(arg1: boolean, arg2: { a: 'A' }): void {}\nfunction baz(): void {}\n\ntype cases = [\n  Expect<Equal<MyParameters<typeof foo>, [string, number]>>,\n  Expect<Equal<MyParameters<typeof bar>, [boolean, { a: 'A' }]>>,\n  Expect<Equal<MyParameters<typeof baz>, []>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/3312/answer/ja\n  > 解答を見る：https://tsch.js.org/3312/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}