{"id":697,"difficulty":"extreme","title":"tag","code":"/*\n  697 - Tag\n  -------\n  by null (@uid11) #最上級\n\n  ### 質問\n\n  Despite the structural typing system in TypeScript, it is sometimes convenient to mark some types with tags, and so that these tags do not interfere with the ability to assign values  of these types to each other.\n\n  For example, using tags, you can check that some value passes through the calls of the required functions, and in the correct order:\n  ```ts\n  const doA = <T extends string>(x: T) => {\n    const result = x\n\n    return result as Tag<typeof result, 'A'>\n  }\n\n  const doB = <T extends string>(x: T) => {\n    const result = x\n\n    return result as Tag<typeof result, 'B'>\n  };\n\n  const a = doA('foo')\n  const b = doB(a)\n\n  type Check0 = IsTrue<HasTags<typeof b, ['A', 'B']>>\n  ```\n\n  Write a function `Tag<B, T extends string>` that takes a type `B` other than `null` and `undefined` and returns a type labeled with the string literal type `T`.\n\n  The labeled types must be mutually assignable with the corresponding original types:\n  ```ts\n  declare let x: string\n  declare let y: Tag<string, 'A'>\n\n  x = y = x\n  ```\n\n  When tagging a type already marked with a tag, a new tag must be added to the end of the list of all tags of the type:\n  ```ts\n  type T0 = Tag<{ foo: string }, 'A'>\n  type T1 = Tag<T0, 'B'>\n\n  type Check1 = IsTrue<HasExactTags<T1, ['A', 'B']>>\n  ```\n\n  Add some functions to check for type tags.\n\n  `GetTags<B>` retrieves a list of all tags of a type `B`:\n  ```ts\n  type T2 = Tag<number, 'C'>\n\n  type Check2 = IsTrue<Equal<GetTags<T2>, ['C']>>\n  ```\n\n  `HasTag<B, T extends string>` checks if type `B` is tagged with tag `T` (and returns `true` or `false`):\n  ```ts\n  type T3 = Tag<0 | 1, 'D'>\n\n  type Check3 = IsTrue<HasTag<T3, 'D'>>\n  ```\n\n  `HasTags<B, T extends readonly string[]>` checks if type `B` is tagged in succession with tags from tuple `T`:\n  ```ts\n  type T4 = Tag<Tag<Tag<{}, 'A'>, 'B'>, 'C'>\n\n  type Check4 = IsTrue<HasTags<T4, ['B', 'C']>>\n  ```\n\n  `HasExactTags<B, T extends readonly string[]>` checks if the list of all tags of type `B` is exactly equal to the `T` tuple:\n  ```ts\n  type T5 = Tag<Tag<unknown, 'A'>, 'B'>\n\n  type Check5 = IsTrue<HasExactTags<T5, ['A', 'B']>>\n  ```\n\n  Finally, add type `UnTag<B>`, which removes all tags from type `B`:\n  ```ts\n  type T6 = Tag<{ bar: number }, 'A'>\n  type T7 = UnTag<T6>\n\n  type Check6 = IsFalse<HasTag<T7, 'A'>>\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/697/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype GetTags<B> = any\n\ntype Tag<B, T extends string> = any\n\ntype UnTag<B> = any\n\ntype HasTag<B, T extends string> = any\ntype HasTags<B, T extends readonly string[]> = any\ntype HasExactTags<B, T extends readonly string[]> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect, IsTrue } from '@type-challenges/utils'\n\n/**\n * Tests of assignable of tagged variables.\n */\ninterface I {\n  foo: string\n}\n\ndeclare let x0: I\ndeclare let x1: Tag<I, 'a'>\ndeclare let x2: Tag<I, 'b'>\ndeclare let x3: Tag<Tag<I, 'a'>, 'b'>\ndeclare let x4: Tag<Tag<I, 'b'>, 'a'>\ndeclare let x5: Tag<Tag<I, 'c'>, 'a'>\ndeclare let x6: Tag<Tag<I, 'c'>, 'b'>\ndeclare let x7: UnTag<Tag<Tag<I, 'c'>, 'b'>>\n\nx0 = x1 = x0 = x2 = x0 = x3 = x0 = x4 = x0 = x5 = x0 = x6 = x0 = x7 = x0\nx1 = x2 = x1 = x3 = x1 = x4 = x1 = x5 = x1 = x6 = x1 = x7 = x1\nx2 = x3 = x2 = x4 = x2 = x5 = x2 = x6 = x2 = x7 = x2\nx3 = x4 = x3 = x5 = x3 = x6 = x3 = x7 = x3\nx4 = x5 = x4 = x6 = x4 = x7 = x4\nx5 = x6 = x5 = x7 = x5\nx6 = x7 = x6\n\ndeclare let y0: string\ndeclare let y1: Tag<string, 'a'>\ndeclare let y2: Tag<string, 'b'>\ndeclare let y3: Tag<Tag<string, 'a'>, 'b'>\ndeclare let y4: Tag<Tag<string, 'b'>, 'a'>\ndeclare let y5: Tag<Tag<string, 'c'>, 'a'>\ndeclare let y6: Tag<Tag<string, 'c'>, 'b'>\ndeclare let y7: UnTag<Tag<Tag<string, 'c'>, 'b'>>\n\ny0 = y1 = y0 = y2 = y0 = y3 = y0 = y4 = y0 = y5 = y0 = y6 = y0 = y7 = y0\ny1 = y2 = y1 = y3 = y1 = y4 = y1 = y5 = y1 = y6 = y1 = y7 = y1\ny2 = y3 = y2 = y4 = y2 = y5 = y2 = y6 = y2 = y7 = y2\ny3 = y4 = y3 = y5 = y3 = y6 = y3 = y7 = y3\ny4 = y5 = y4 = y6 = y4 = y7 = y4\ny5 = y6 = y5 = y7 = y5\ny6 = y7 = y6\n\n// @ts-expect-error\nx0 = y0\n// @ts-expect-error\nx1 = y1\n// @ts-expect-error\nx2 = y2\n// @ts-expect-error\nx3 = y3\n// @ts-expect-error\nx4 = y4\n// @ts-expect-error\nx5 = y5\n// @ts-expect-error\nx6 = y6\n// @ts-expect-error\nx7 = y7\n\ndeclare const UNIQUE_SYMBOL: unique symbol\ntype US = typeof UNIQUE_SYMBOL\n\n/**\n * Tests of API (Tag, GetTags, Untag, HasTag, HasTags, HasExactTags).\n */\ntype cases = [\n  /**\n   * Tag.\n   */\n  IsTrue<Equal<Tag<null, 'foo'>, null>>,\n  IsTrue<Equal<Tag<undefined, 'foo'>, undefined>>,\n  IsTrue<Equal<'x', keyof Tag<{ x: 0 }, 'foo'> & string>>,\n\n  /**\n   * GetTags.\n   */\n  IsTrue<Equal<GetTags<null>, []>>,\n  IsTrue<Equal<GetTags<any>, []>>,\n  IsTrue<Equal<GetTags<undefined>, []>>,\n  IsTrue<Equal<GetTags<Tag<any, 'foo'>>, ['foo']>>,\n  IsTrue<Equal<GetTags<Tag<null | 1, 'foo'>>, ['foo']>>,\n  IsTrue<Equal<GetTags<Tag<0, 'foo'> | 1>, []>>,\n  IsTrue<Equal<GetTags<Tag<{}, 'foo'> | Tag<1, 'foo'>>, ['foo']>>,\n  IsTrue<Equal<GetTags<Tag<string, 'foo'>>, ['foo']>>,\n  IsTrue<Equal<GetTags<Tag<never, 'foo'>>, ['foo']>>,\n  IsTrue<Equal<GetTags<Tag<Tag<string, 'foo'>, 'bar'>>, ['foo', 'bar']>>,\n  IsTrue<\n  Equal<\n  GetTags<Tag<Tag<Tag<{}, 'foo'>, 'bar'>, 'baz'>>,\n  ['foo', 'bar', 'baz']\n  >\n  >,\n\n  /**\n   * UnTag.\n   */\n  IsTrue<Equal<UnTag<null>, null>>,\n  IsTrue<Equal<UnTag<undefined>, undefined>>,\n  IsTrue<Equal<UnTag<Tag<{}, 'foo'>>, {}>>,\n  IsTrue<Equal<UnTag<Tag<Tag<{ x: 0 }, 'foo'>, 'bar'>>, { x: 0 }>>,\n  IsTrue<Equal<keyof UnTag<Tag<Tag<number, 'foo'>, 'bar'>>, keyof number>>,\n\n  /**\n   * HasTag.\n   */\n  Expect<Equal<HasTag<null, 'foo'>, false>>,\n  Expect<Equal<HasTag<undefined, 'foo'>, false>>,\n  Expect<Equal<HasTag<Tag<any, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<1, 'foo'> | {}, 'foo'>, false>>,\n  Expect<Equal<HasTag<Tag<{}, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<0, 'foo'> | Tag<1, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<0, 'foo'> | Tag<1, 'bar'>, 'foo'>, false>>,\n  Expect<Equal<HasTag<Tag<Tag<{}, 'foo'>, 'bar'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<Tag<symbol, 'bar'>, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<Tag<{}, 'bar'>, 'baz'>, 'foo'>, false>>,\n  Expect<Equal<HasTag<Tag<true, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<null, 'foo'>, 'foo'>, false>>,\n  Expect<Equal<HasTag<Tag<Tag<undefined, 'foo'>, 'bar'>, 'bar'>, false>>,\n  Expect<Equal<HasTag<Tag<Tag<false, 'foo'>, 'bar'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<Tag<never, 'bar'>, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<{}, 'foo'>, 'foo'>, true>>,\n  Expect<Equal<HasTag<Tag<{}, 'foo'>, 'bar'>, false>>,\n  Expect<Equal<HasTag<{}, 'foo'>, false>>,\n\n  /**\n   * HasTags.\n   */\n  Expect<Equal<HasTags<null, ['foo']>, false>>,\n  Expect<Equal<HasTags<undefined, ['foo']>, false>>,\n  Expect<Equal<HasTags<Tag<any, 'bar'>, ['foo']>, false>>,\n  Expect<Equal<HasTags<Tag<{}, 'bar'>, ['foo']>, false>>,\n  Expect<Equal<HasTags<Tag<{}, 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasTags<Tag<any, 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasTags<Tag<{} | undefined, 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<string, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<3n, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<{}, 'bar'>, 'foo'>, ['foo', 'bar']>, false>>,\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, 'baz'>, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<Tag<symbol, 'baz'>, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, 'foo'>, 'bar'>, 'baz'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<Tag<0, 'foo'>, 'bar'>, 'baz'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasTags<Tag<Tag<Tag<{}, 'foo'>, 'baz'>, 'bar'>, ['foo', 'bar']>, false>>,\n  Expect<Equal<HasTags<Tag<Tag<unknown, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n\n  /**\n   * HasExactTags.\n   */\n  Expect<Equal<HasExactTags<0, []>, true>>,\n  Expect<Equal<HasExactTags<null, []>, true>>,\n  Expect<Equal<HasExactTags<undefined, []>, true>>,\n  Expect<Equal<HasExactTags<Tag<number, 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasExactTags<Tag<any, 'foo'>, ['bar']>, false>>,\n  Expect<Equal<HasExactTags<Tag<Tag<any, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n  Expect<Equal<HasExactTags<Tag<'', 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasExactTags<Tag<US, 'foo'>, ['foo']>, true>>,\n  Expect<Equal<HasExactTags<Tag<{}, 'foo'>, ['bar']>, false>>,\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, 'foo'>, 'bar'>, 'baz'>, ['foo', 'bar']>, false>>,\n  Expect<Equal<HasExactTags<Tag<Tag<Tag<{}, 'foo'>, 'bar'>, 'baz'>, ['foo', 'bar', 'baz']>, true>>,\n  Expect<Equal<HasExactTags<Tag<Tag<void, 'foo'>, 'bar'>, ['foo', 'bar']>, true>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/697/answer/ja\n  > 解答を見る：https://tsch.js.org/697/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}