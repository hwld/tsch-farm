{"id":2857,"difficulty":"hard","title":"isrequiredkey","code":"/*\n  2857 - IsRequiredKey\n  -------\n  by jiangshan (@jiangshanmeta) #上級 #utils\n\n  ### 質問\n\n  Implement a generic ```IsRequiredKey<T, K>```  that return whether ```K``` are required keys of ```T``` .\n\n  For example\n\n  ```typescript\n  type A = IsRequiredKey<{ a: number, b?: string },'a'> // true\n  type B = IsRequiredKey<{ a: number, b?: string },'b'> // false\n  type C = IsRequiredKey<{ a: number, b?: string },'b' | 'a'> // false\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/2857/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype IsRequiredKey<T, K extends keyof T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<IsRequiredKey<{ a: number, b?: string }, 'a'>, true>>,\n  Expect<Equal<IsRequiredKey<{ a: undefined, b: string }, 'a'>, true>>,\n  Expect<Equal<IsRequiredKey<{ a: number, b?: string }, 'b'>, false>>,\n  Expect<Equal<IsRequiredKey<{ a: number, b?: string }, 'b' | 'a'>, false>>,\n  Expect<Equal<IsRequiredKey<{ a: undefined, b: undefined }, 'b' | 'a'>, true>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/2857/answer/ja\n  > 解答を見る：https://tsch.js.org/2857/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}