{"id":3326,"title":"bem-style-string","difficulty":"medium","code":"/*\n  3326 - BEM style string\n  -------\n  by Songhn (@songhn233) #中級 #template-literal #union #tuple\n\n  ### 質問\n\n  The Block, Element, Modifier methodology (BEM) is a popular naming convention for classes in CSS.\n\n  For example, the block component would be represented as `btn`, element that depends upon the block would be represented as `btn__price`, modifier that changes the style of the block would be represented as `btn--big` or `btn__price--warning`.\n\n  Implement `BEM<B, E, M>` which generate string union from these three parameters. Where `B` is a string literal, `E` and `M` are string arrays (can be empty).\n\n  > GitHubで確認する：https://tsch.js.org/3326/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype BEM<B extends string, E extends string[], M extends string[]> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<BEM<'btn', ['price'], []>, 'btn__price'>>,\n  Expect<Equal<BEM<'btn', ['price'], ['warning', 'success']>, 'btn__price--warning' | 'btn__price--success' >>,\n  Expect<Equal<BEM<'btn', [], ['small', 'medium', 'large']>, 'btn--small' | 'btn--medium' | 'btn--large' >>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/3326/answer/ja\n  > 解答を見る：https://tsch.js.org/3326/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}