{"id":5181,"difficulty":"hard","title":"mutable-keys","code":"/*\n  5181 - Mutable Keys\n  -------\n  by Yugang Cao (@Talljack) #上級 #utils\n\n  ### 質問\n\n  Implement the advanced util type MutableKeys<T>, which picks all the mutable (not readonly) keys into a union.\n\n  For example:\n\n  ```ts\n  type Keys = MutableKeys<{ readonly foo: string; bar: number }>;\n  // expected to be “bar”\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/5181/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype MutableKeys<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<MutableKeys<{ a: number, readonly b: string }>, 'a'>>,\n  Expect<Equal<MutableKeys<{ a: undefined, readonly b: undefined }>, 'a'>>,\n  Expect<Equal<MutableKeys<{ a: undefined, readonly b?: undefined, c: string, d: null }>, 'a' | 'c' | 'd'>>,\n  Expect<Equal<MutableKeys<{}>, never>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/5181/answer/ja\n  > 解答を見る：https://tsch.js.org/5181/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}