{"id":106,"title":"trimleft","difficulty":"medium","code":"/*\n  106 - Trim Left\n  -------\n  by Anthony Fu (@antfu) #中級 #template-literal\n\n  ### 質問\n\n  文字列を受け取り、先頭の空白を削除した新しい文字列を返す `TrimLeft<T>` を実装します。\n\n  例えば\n\n  ```ts\n  type trimed = TrimLeft<'  Hello World  '> // expected to be 'Hello World  '\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/106/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype TrimLeft<S extends string> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<TrimLeft<'str'>, 'str'>>,\n  Expect<Equal<TrimLeft<' str'>, 'str'>>,\n  Expect<Equal<TrimLeft<'     str'>, 'str'>>,\n  Expect<Equal<TrimLeft<'     str     '>, 'str     '>>,\n  Expect<Equal<TrimLeft<'   \\n\\t foo bar '>, 'foo bar '>>,\n  Expect<Equal<TrimLeft<''>, ''>>,\n  Expect<Equal<TrimLeft<' \\n\\t'>, ''>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/106/answer/ja\n  > 解答を見る：https://tsch.js.org/106/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}