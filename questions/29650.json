{"id":29650,"difficulty":"medium","title":"extracttoobject","code":"/*\n  29650 - ExtractToObject\n  -------\n  by Maxim Bazuev (@bazuka5801) #中級 #object\n\n  ### 質問\n\n  Implement a type that extract prop value to the interface. The type takes the two arguments. The output should be an object with the prop values.\n    Prop value is object.\n\n    For example\n\n  ```ts\n  type Test = { id: '1', myProp: { foo: '2' }}\n  type Result = ExtractToObject<Test, 'myProp'> // expected to be { id: '1', foo: '2' }\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/29650/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype ExtractToObject<T, U> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype test1 = { id: '1', myProp: { foo: '2' } }\r\n\r\ntype testExpect1 = {\r\n  id: '1'\r\n  foo: '2'\r\n}\r\n\r\ntype test2 = {\r\n  id: '1'\r\n  prop1: { zoo: '2' }\r\n  prop2: { foo: '4' }\r\n}\r\n\r\ntype testExpect2 = {\r\n  id: '1'\r\n  prop1: { zoo: '2' }\r\n  foo: '4'\r\n}\r\n\r\ntype test3 = {\r\n  prop1: { zoo: '2', a: 2, b: 4, c: 7 }\r\n  prop2: { foo: '4', v: 2, d: 4, g: 7 }\r\n  k: 289\r\n}\r\n\r\ntype testExpect3 = {\r\n  zoo: '2'\r\n  a: 2\r\n  b: 4\r\n  c: 7\r\n  prop2: { foo: '4', v: 2, d: 4, g: 7 }\r\n  k: 289\r\n}\r\n\r\ntype test4 = { id: '1', myProp: { foo: '2' } }\r\n\r\ntype testExpect4 = {\r\n  id: '1'\r\n  myProp: { foo: '2' }\r\n}\r\n\r\ntype cases = [\r\n  Expect<Equal<ExtractToObject<test1, 'myProp'>, testExpect1>>,\r\n  Expect<Equal<ExtractToObject<test2, 'prop2'>, testExpect2>>,\r\n  Expect<Equal<ExtractToObject<test3, 'prop1'>, testExpect3>>,\r\n  // @ts-expect-error\r\n  Expect<Equal<ExtractToObject<test4, 'prop4'>, testExpect4>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/29650/answer/ja\n  > 解答を見る：https://tsch.js.org/29650/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}