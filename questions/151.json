{"id":151,"title":"query-string-parser","difficulty":"extreme","code":"/*\n  151 - Query String Parser\n  -------\n  by Pig Fang (@g-plane) #最上級 #template-literal\n\n  ### 質問\n\n  You're required to implement a type-level parser to parse URL query string into a object literal type.\n\n  Some detailed requirements:\n\n  - Value of a key in query string can be ignored but still be parsed to `true`. For example, `'key'` is without value, so the parser result is `{ key: true }`.\n  - Duplicated keys must be merged into one. If there are different values with the same key, values must be merged into a tuple type.\n  - When a key has only one value, that value can't be wrapped into a tuple type.\n  - If values with the same key appear more than once, it must be treated as once. For example, `key=value&key=value` must be treated as `key=value` only.\n\n  > GitHubで確認する：https://tsch.js.org/151/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype ParseQueryString = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<ParseQueryString<''>, {}>>,\n  Expect<Equal<ParseQueryString<'k1'>, { k1: true }>>,\n  Expect<Equal<ParseQueryString<'k1&k1'>, { k1: true }>>,\n  Expect<Equal<ParseQueryString<'k1&k2'>, { k1: true, k2: true }>>,\n  Expect<Equal<ParseQueryString<'k1=v1'>, { k1: 'v1' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k1=v2'>, { k1: ['v1', 'v2'] }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v2'>, { k1: 'v1', k2: 'v2' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v2&k1=v2'>, { k1: ['v1', 'v2'], k2: 'v2' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k2'>, { k1: 'v1', k2: true }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k1=v1'>, { k1: 'v1' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k1=v2&k1=v1'>, { k1: ['v1', 'v2'] }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v1&k1=v2&k1=v1'>, { k1: ['v1', 'v2'], k2: 'v1' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k2=v2&k1=v2&k1=v3'>, { k1: ['v1', 'v2', 'v3'], k2: 'v2' }>>,\n  Expect<Equal<ParseQueryString<'k1=v1&k1'>, { k1: ['v1', true] }>>,\n  Expect<Equal<ParseQueryString<'k1&k1=v1'>, { k1: [true, 'v1'] }>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/151/answer/ja\n  > 解答を見る：https://tsch.js.org/151/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}