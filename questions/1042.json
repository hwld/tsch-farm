{"id":1042,"difficulty":"medium","title":"isnever","code":"/*\n  1042 - IsNever\n  -------\n  by hiroya iizuka (@hiroyaiizuka) #中級 #union #utils\n\n  ### 質問\n\n  Implement a type IsNever, which takes input type `T`.\n  If the type of resolves to `never`, return `true`, otherwise `false`.\n\n  For example:\n\n  ```ts\n  type A = IsNever<never> // expected to be true\n  type B = IsNever<undefined> // expected to be false\n  type C = IsNever<null> // expected to be false\n  type D = IsNever<[]> // expected to be false\n  type E = IsNever<number> // expected to be false\n  ```\n\n  > GitHubで確認する：https://tsch.js.org/1042/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype IsNever<T> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<IsNever<never>, true>>,\n  Expect<Equal<IsNever<never | string>, false>>,\n  Expect<Equal<IsNever<''>, false>>,\n  Expect<Equal<IsNever<undefined>, false>>,\n  Expect<Equal<IsNever<null>, false>>,\n  Expect<Equal<IsNever<[]>, false>>,\n  Expect<Equal<IsNever<{}>, false>>,\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/1042/answer/ja\n  > 解答を見る：https://tsch.js.org/1042/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}