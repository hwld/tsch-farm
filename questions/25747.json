{"id":25747,"title":"isnegativenumber","difficulty":"hard","code":"/*\n  25747 - IsNegativeNumber\n  -------\n  by andrew jarrett (@ahrjarrett) #上級 #number #template literal\n\n  ### 質問\n\n  Sometimes when working with numeric literals, we need to rule out (or enforce) that the provided number is a positive integer.\n\n  To do that, we first need a way to tell if the number is negative.\n\n  Write a type-level function `IsNegativeNumber` that accepts a number `N` and returns:\n\n  - `true` if `N` is negative\n  - `false` if `N` is positive\n  - `false` if `N` is `0`,\n  - `never` if `N` is `number`\n  - `never` if `N` is a union\n\n  > GitHubで確認する：https://tsch.js.org/25747/ja\n*/\n\n/* _____________ ここにコードを記入 _____________ */\n\ntype IsNegativeNumber<T extends number> = any\n\n/* _____________ テストケース _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\r\n\r\ntype cases = [\r\n  Expect<Equal<IsNegativeNumber<0>, false>>,\r\n  Expect<Equal<IsNegativeNumber<number>, never>>,\r\n  Expect<Equal<IsNegativeNumber<-1 | -2>, never>>,\r\n  Expect<Equal<IsNegativeNumber<-1>, true>>,\r\n  Expect<Equal<IsNegativeNumber<-1.9>, true>>,\r\n  Expect<Equal<IsNegativeNumber<-100_000_000>, true>>,\r\n  Expect<Equal<IsNegativeNumber<1>, false>>,\r\n  Expect<Equal<IsNegativeNumber<1.9>, false>>,\r\n  Expect<Equal<IsNegativeNumber<100_000_000>, false>>,\r\n]\n\n/* _____________ 次のステップ _____________ */\n/*\n  > 解答を共有する：https://tsch.js.org/25747/answer/ja\n  > 解答を見る：https://tsch.js.org/25747/solutions\n  > その他の課題：https://tsch.js.org/ja\n*/\n"}